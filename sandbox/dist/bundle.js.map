{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-runtime/core-js/object/create.js","node_modules/babel-runtime/core-js/object/set-prototype-of.js","node_modules/babel-runtime/core-js/promise.js","node_modules/core-js/library/fn/object/create.js","node_modules/core-js/library/fn/object/set-prototype-of.js","node_modules/core-js/library/fn/promise.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_add-to-unscopables.js","node_modules/core-js/library/modules/_an-instance.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_classof.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_for-of.js","node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_invoke.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_is-array-iter.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_iter-call.js","node_modules/core-js/library/modules/_iter-create.js","node_modules/core-js/library/modules/_iter-define.js","node_modules/core-js/library/modules/_iter-detect.js","node_modules/core-js/library/modules/_iter-step.js","node_modules/core-js/library/modules/_iterators.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_microtask.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_object-gopd.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_redefine-all.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_set-proto.js","node_modules/core-js/library/modules/_set-species.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_species-constructor.js","node_modules/core-js/library/modules/_string-at.js","node_modules/core-js/library/modules/_task.js","node_modules/core-js/library/modules/_to-index.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/core.get-iterator-method.js","node_modules/core-js/library/modules/es6.array.iterator.js","node_modules/core-js/library/modules/es6.object.create.js","node_modules/core-js/library/modules/es6.object.set-prototype-of.js","node_modules/core-js/library/modules/es6.object.to-string.js","node_modules/core-js/library/modules/es6.promise.js","node_modules/core-js/library/modules/es6.string.iterator.js","node_modules/core-js/library/modules/web.dom.iterable.js","src/engine/entities/bomb-manager.ts","src/engine/entities/entity.ts","src/engine/entities/map.ts","src/engine/entities/monster-manager.ts","src/engine/entities/player.ts","src/engine/game.ts","src/engine/input.ts","src/engine/logger.ts","src/engine/spritesheet.ts","src/engine/states/index.ts","src/engine/states/maingame.ts","src/engine/states/state.ts","src/engine/states/titlescreen.ts","src/engine/util.ts","src/engine/window-manager.ts","src/main.ts"],"names":[],"mappings":"AAAA;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;;ACFA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZA,uBAAiC;AACjC,oBAAsC;AACtC,uBAAkC;AAClC,mBAA+B;AAC/B,4BAA4C;AAC5C,gCAA2D;AAE3D,IAAM,AAAc,iBAAW,AAAI,AAAC;AAEpC,IAAK,AAIJ;AAJD,WAAK,AAAW;AACf,2CAAI;AACJ,gDAAS;AACT,+CAAQ,AACT;AAAC,GAJI,AAAW,gBAAX,AAAW,cAIf;AAED,IAAK,AAMJ;AAND,WAAK,AAAS;AACb,qCAAM;AACN,uCAAI;AACJ,uCAAI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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nmodule.exports = require('../modules/_core').Promise;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","var ctx         = require('./_ctx')\n  , call        = require('./_iter-call')\n  , isArrayIter = require('./_is-array-iter')\n  , anObject    = require('./_an-object')\n  , toLength    = require('./_to-length')\n  , getIterFn   = require('./core.get-iterator-method')\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require('./_global').document && document.documentElement;","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// check on default Array iterator\nvar Iterators  = require('./_iterators')\n  , ITERATOR   = require('./_wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};","'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","var ITERATOR     = require('./_wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","module.exports = true;","var global    = require('./_global')\n  , macrotask = require('./_task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require('./_cof')(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require('./_an-object')\n  , dPs         = require('./_object-dps')\n  , enumBugKeys = require('./_enum-bug-keys')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};","var dP       = require('./_object-dp')\n  , anObject = require('./_an-object')\n  , getKeys  = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};","var pIE            = require('./_object-pie')\n  , createDesc     = require('./_property-desc')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , has            = require('./_has')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require('./_has')\n  , toObject    = require('./_to-object')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};","var has          = require('./_has')\n  , toIObject    = require('./_to-iobject')\n  , arrayIndexOf = require('./_array-includes')(false)\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require('./_object-keys-internal')\n  , enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};","exports.f = {}.propertyIsEnumerable;","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","var hide = require('./_hide');\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};","module.exports = require('./_hide');","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object')\n  , anObject = require('./_an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};","'use strict';\nvar global      = require('./_global')\n  , core        = require('./_core')\n  , dP          = require('./_object-dp')\n  , DESCRIPTORS = require('./_descriptors')\n  , SPECIES     = require('./_wks')('species');\n\nmodule.exports = function(KEY){\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};","var def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var shared = require('./_shared')('keys')\n  , uid    = require('./_uid');\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};","var global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require('./_an-object')\n  , aFunction = require('./_a-function')\n  , SPECIES   = require('./_wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};","var toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","var ctx                = require('./_ctx')\n  , invoke             = require('./_invoke')\n  , html               = require('./_html')\n  , cel                = require('./_dom-create')\n  , global             = require('./_global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require('./_cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};","var toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","var $export = require('./_export')\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: require('./_object-create')});","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});","","'use strict';\nvar LIBRARY            = require('./_library')\n  , global             = require('./_global')\n  , ctx                = require('./_ctx')\n  , classof            = require('./_classof')\n  , $export            = require('./_export')\n  , isObject           = require('./_is-object')\n  , aFunction          = require('./_a-function')\n  , anInstance         = require('./_an-instance')\n  , forOf              = require('./_for-of')\n  , speciesConstructor = require('./_species-constructor')\n  , task               = require('./_task').set\n  , microtask          = require('./_microtask')()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});","'use strict';\nvar $at  = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","require('./es6.array.iterator');\nvar global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , TO_STRING_TAG = require('./_wks')('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}","import { Entity } from './entity'\r\nimport { MapTile, Block } from './map'\r\nimport { Logger } from '../logger'\r\nimport * as Util from '../util'\r\nimport { SpriteSheet } from '../spritesheet'\r\nimport { MonsterManager, Monster } from './monster-manager'\r\n\r\nconst _BOMB_TIME_OUT: number = 1200;\r\n\r\nenum BOMB_STATES {\r\n\tIDLE,\r\n\tEXPLODING,\r\n\tCLEAN_UP\r\n}\r\n\r\nenum DIRECTION {\r\n\tUP = 0,\r\n\tDOWN,\r\n\tLEFT,\r\n\tRIGHT,\r\n\tCOUNT\r\n}\r\n\r\nclass BombExplosion {\r\n\tprivate _fireCrossAnim: string[] = [\r\n\t\t'fire_cross_1.png',\r\n\t\t'fire_cross_2.png',\r\n\t\t'fire_cross_3.png',\r\n\t\t'fire_cross_4.png',\r\n\t\t'fire_cross_5.png'\r\n\t];\r\n\r\n\tprivate _fireDownAnim: string[] = [\r\n\t\t'fire_down_1.png',\r\n\t\t'fire_down_2.png',\r\n\t\t'fire_down_3.png',\r\n\t\t'fire_down_4.png',\r\n\t\t'fire_down_5.png'\r\n\t];\r\n\r\n\tprivate _fireUpAnim: string[] = [\r\n\t\t'fire_up_1.png',\r\n\t\t'fire_up_2.png',\r\n\t\t'fire_up_3.png',\r\n\t\t'fire_up_4.png',\r\n\t\t'fire_up_5.png'\r\n\t];\r\n\r\n\tprivate _fireLeftAnim: string[] = [\r\n\t\t'fire_left_1.png',\r\n\t\t'fire_left_2.png',\r\n\t\t'fire_left_3.png',\r\n\t\t'fire_left_4.png',\r\n\t\t'fire_left_5.png'\r\n\t];\r\n\r\n\tprivate _fireRightAnim: string[] = [\r\n\t\t'fire_right_1.png',\r\n\t\t'fire_right_2.png',\r\n\t\t'fire_right_3.png',\r\n\t\t'fire_right_4.png',\r\n\t\t'fire_right_5.png'\r\n\t];\r\n\r\n\tprivate _fireExtVerticalAnim: string[] = [\r\n\t\t'fire_ext_ud_1.png',\r\n\t\t'fire_ext_ud_2.png',\r\n\t\t'fire_ext_ud_3.png',\r\n\t\t'fire_ext_ud_4.png',\r\n\t\t'fire_ext_ud_5.png'\r\n\t];\r\n\r\n\tprivate _fireExtHorizontalAnim: string[] = [\r\n\t\t'fire_ext_lr_1.png',\r\n\t\t'fire_ext_lr_2.png',\r\n\t\t'fire_ext_lr_3.png',\r\n\t\t'fire_ext_lr_4.png',\r\n\t\t'fire_ext_lr_5.png'\r\n\t];\r\n\r\n\tprivate _bombLength: number = 1;\r\n\tprivate _currentTick: number = 0;\r\n\tprivate _animSpeed: number = 90;\r\n\tprivate _currentAnimIdx: number = 0;\r\n\r\n\tpublic onAnimEnd: () => void;\r\n\r\n\tprivate tileX: number = -1;\r\n\tprivate tileY: number = -1;\r\n\r\n\tprivate screenX: number = -1;\r\n\tprivate screenY: number = -1;\r\n\r\n\tprivate _isDone: boolean = false;\r\n\tprivate _isReverse: boolean = false;\r\n\r\n\tprivate _SpriteSheet: SpriteSheet = SpriteSheet.getInstance();\r\n\r\n\tprivate _BombExplosionLengthArr: number[] = [\r\n\t\t1, //top\r\n\t\t1, //left\r\n\t\t1, //right\r\n\t\t1  //down\r\n\t];\r\n\r\n\tconstructor(_tileX: number, _tileY: number, _bombLength: number) {\r\n\t\tthis.tileX = _tileX;\r\n\t\tthis.tileY = _tileY;\r\n\r\n\t\tvar vec2 = MapTile.getInstance().getTileScreenPosition(_tileX, _tileY);\r\n\t\tthis.screenX = vec2.x;\r\n\t\tthis.screenY = vec2.y;\r\n\r\n\t\tthis._bombLength = _bombLength;\r\n\r\n\t\tthis._BombExplosionLengthArr = this._CheckExplosionBounds();\r\n\t}\r\n\r\n\tpublic update() {\r\n\t\tif (!this._isDone) {\r\n\t\t\tvar time = Date.now();\r\n\t\t\tif ((time - this._currentTick) > this._animSpeed) {\r\n\t\t\t\tthis._currentTick = time;\r\n\t\t\t\tif (this._isReverse) {\r\n\t\t\t\t\tthis._currentAnimIdx--;\r\n\r\n\t\t\t\t\tif (this._currentAnimIdx < 0) {\r\n\t\t\t\t\t\tthis.onAnimEnd();\r\n\t\t\t\t\t\tthis._isDone = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._currentAnimIdx++;\r\n\r\n\t\t\t\t\tif (this._currentAnimIdx >= this._fireCrossAnim.length) {\r\n\t\t\t\t\t\tthis._currentAnimIdx = this._fireCrossAnim.length - 1;\r\n\t\t\t\t\t\tthis._isReverse = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._CheckBombHit();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate _CheckBombHit(){\r\n\t\tvar monsters = MonsterManager.getInstance().GetMonsters();\r\n\t\tvar player = MonsterManager.getInstance().GetPlayers();\r\n\r\n\t\t// horizontal\r\n\t\t{\r\n\t\t\tlet leftCnt = this._BombExplosionLengthArr[DIRECTION.LEFT];\r\n\t\t\tlet rightCnt = this._BombExplosionLengthArr[DIRECTION.RIGHT];\r\n\t\t\tlet leftX = (leftCnt * 16 * -1);\r\n\t\t\tlet rightX = (rightCnt * 16);\r\n\r\n\t\t\tlet tileRect = new Util.cRectangle(leftX + this.screenX,this.screenY,rightX + Math.abs(leftX) + 16,16);\r\n\r\n\t\t\t//Check for Hits\r\n\t\t\tmonsters.forEach((monster) => {\r\n\t\t\t\tif (!monster.isHit) {\r\n\t\t\t\t\tif (monster.GetHitBounds().within(tileRect))\r\n\t\t\t\t\t\tmonster.Die();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif(player.GetHitBounds().within(tileRect)){\r\n\t\t\t\tplayer.Die();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// verticalsada\r\n\t\t{\r\n\t\t\tlet upCnt = this._BombExplosionLengthArr[DIRECTION.UP];\r\n\t\t\tlet downCnt = this._BombExplosionLengthArr[DIRECTION.DOWN];\r\n\t\t\tlet upX = (leftCnt * 16 * -1);\r\n\t\t\tlet downX = (downCnt * 16);\r\n\r\n\t\t\tlet tileRect = new Util.cRectangle(this.screenX,upX + this.screenY,16,downX + Math.abs(upX) + 16);\r\n\r\n\t\t\t//Check for Hits\r\n\t\t\tmonsters.forEach((monster) => {\r\n\t\t\t\tif (!monster.isHit) {\r\n\t\t\t\t\tif (monster.GetHitBounds().within(tileRect))\r\n\t\t\t\t\t\tmonster.Die();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif(player.GetHitBounds().within(tileRect)){\r\n\t\t\t\tplayer.Die();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic Draw(ctx: CanvasRenderingContext2D) {\r\n\t\tif (this._isDone) return;\r\n\r\n\t\tctx.save();\r\n\t\tctx.translate(this.screenX, this.screenY);\r\n\t\t//draw center\r\n\t\tthis._SpriteSheet.Draw(0, 0, 1, this._fireCrossAnim[this._currentAnimIdx], ctx);\r\n\t\t//vertical\r\n\t\tfor (let i = 1; i <= this._BombExplosionLengthArr[DIRECTION.UP]; i++) {\r\n\t\t\tif (i === (this._bombLength))\r\n\t\t\t\tthis._SpriteSheet.Draw(0, -16 * i, 1, this._fireUpAnim[this._currentAnimIdx], ctx);\r\n\t\t\telse\r\n\t\t\t\tthis._SpriteSheet.Draw(0, -16 * i, 1, this._fireExtVerticalAnim[this._currentAnimIdx], ctx);\r\n\t\t}\r\n\t\tfor (let i = 1; i <= this._BombExplosionLengthArr[DIRECTION.DOWN]; i++) {\r\n\t\t\tif (i === (this._bombLength))\r\n\t\t\t\tthis._SpriteSheet.Draw(0, 16 * i, 1, this._fireDownAnim[this._currentAnimIdx], ctx);\r\n\t\t\telse\r\n\t\t\t\tthis._SpriteSheet.Draw(0, 16 * i, 1, this._fireExtVerticalAnim[this._currentAnimIdx], ctx);\r\n\t\t}\r\n\r\n\t\t//horizontal\r\n\t\tfor (let i = 1; i <= this._BombExplosionLengthArr[DIRECTION.RIGHT]; i++) {\r\n\t\t\tif (i === (this._bombLength))\r\n\t\t\t\tthis._SpriteSheet.Draw(16 * i, 0, 1, this._fireRightAnim[this._currentAnimIdx], ctx);\r\n\t\t\telse\r\n\t\t\t\tthis._SpriteSheet.Draw(16 * i, 0, 1, this._fireExtHorizontalAnim[this._currentAnimIdx], ctx);\r\n\t\t}\r\n\r\n\t\tfor (let i = 1; i <= this._BombExplosionLengthArr[DIRECTION.LEFT]; i++) {\r\n\t\t\tif (i === (this._bombLength))\r\n\t\t\t\tthis._SpriteSheet.Draw(-16 * i, 0, 1, this._fireLeftAnim[this._currentAnimIdx], ctx);\r\n\t\t\telse\r\n\t\t\t\tthis._SpriteSheet.Draw(-16 * i, 0, 1, this._fireExtHorizontalAnim[this._currentAnimIdx], ctx);\r\n\t\t}\r\n\r\n\t\tctx.restore();\r\n\t}\r\n\r\n\tpublic isEnd(): boolean {\r\n\t\treturn this._isDone;\r\n\t}\r\n\r\n\tprivate _CheckExplosionBounds(): number[] {\r\n\t\tlet boundarray = [0, 0, 0, 0];\r\n\r\n\r\n\t\tfor (let i = 0; i < this._bombLength; i++) {\r\n\t\t\tlet offset = - 1 - i;\r\n\t\t\tlet block = MapTile.getInstance().getTile(this.tileX, this.tileY + offset);\r\n\t\t\tif (block != Block.GROUND) {\r\n\t\t\t\tif (block == Block.BREAKBLOCK) {\r\n\t\t\t\t\tMapTile.getInstance().DestroyTile(this.tileX, this.tileY + offset);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tboundarray[DIRECTION.UP]++;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this._bombLength; i++) {\r\n\t\t\tlet offset = 1 + i;\r\n\t\t\tlet block = MapTile.getInstance().getTile(this.tileX, this.tileY + offset);\r\n\t\t\tif (block != Block.GROUND) {\r\n\t\t\t\tif (block == Block.BREAKBLOCK) {\r\n\t\t\t\t\tMapTile.getInstance().DestroyTile(this.tileX, this.tileY + offset);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tboundarray[DIRECTION.DOWN]++;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this._bombLength; i++) {\r\n\t\t\tlet offset = - 1 - i;\r\n\t\t\tlet block = MapTile.getInstance().getTile(this.tileX + offset, this.tileY);\r\n\t\t\tif (block != Block.GROUND) {\r\n\t\t\t\tif (block == Block.BREAKBLOCK) {\r\n\t\t\t\t\tMapTile.getInstance().DestroyTile(this.tileX + offset, this.tileY);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tboundarray[DIRECTION.LEFT]++;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this._bombLength; i++) {\r\n\t\t\tlet offset = 1 + i;\r\n\t\t\tlet block = MapTile.getInstance().getTile(this.tileX + offset, this.tileY);\r\n\t\t\tif (block != Block.GROUND) {\r\n\t\t\t\tif (block == Block.BREAKBLOCK) {\r\n\t\t\t\t\tMapTile.getInstance().DestroyTile(this.tileX + offset, this.tileY);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tboundarray[DIRECTION.RIGHT]++;\r\n\t\t}\r\n\r\n\t\tLogger.getInstance().debug(boundarray);\r\n\t\treturn boundarray;\r\n\t}\r\n}\r\n\r\n\r\nclass Bomb extends Entity {\r\n\tprivate _bombSprites: string[] = [\r\n\t\t'bomb_1.png',\r\n\t\t'bomb_2.png',\r\n\t\t'bomb_3.png',\r\n\t\t'bomb_2.png',\r\n\t];\r\n\tpublic currentMapPosition: Util.Vector2;\r\n\tpublic toDelete: boolean = false;\r\n\r\n\tprivate _bombLength: number = 2;\r\n\tprivate _currentTick: number = 0;\r\n\tprivate _animSpeed: number = 320;\r\n\tprivate _currentBombIdleIdx: number = 0;\r\n\r\n\tprivate _kaboom: boolean = false;\r\n\r\n\tprivate _bombAnimObj: BombExplosion = null;\r\n\r\n\tconstructor(_tileX: number, _tileY: number) {\r\n\t\tsuper(0, 0, 'bomb_1.png', 1);\r\n\r\n\t\tthis.currentMapPosition = new Util.Vector2(_tileX, _tileY);\r\n\r\n\t\tvar vec2 = MapTile.getInstance().getTileScreenPosition(_tileX, _tileY);\r\n\r\n\t\tthis.x = vec2.x;\r\n\t\tthis.y = vec2.y;\r\n\r\n\t\tthis.toDelete = false;\r\n\r\n\t\tthis._BombTimerStart();\r\n\t}\r\n\r\n\tpublic Update(delta: number): void {\r\n\t\tsuper.Update(delta);\r\n\t\tthis._tick();\r\n\r\n\t\tif (this._bombAnimObj !== null) this._bombAnimObj.update();\r\n\t}\r\n\r\n\tpublic Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n\t\tsuper.Draw(delta, ctx);\r\n\r\n\t\tif (this._bombAnimObj !== null) this._bombAnimObj.Draw(ctx);\r\n\t}\r\n\r\n\tprivate _tick(): boolean {\r\n\t\tif (this._kaboom)\r\n\t\t\treturn false;\r\n\r\n\t\tvar time = Date.now();\r\n\t\tif ((time - this._currentTick) > this._animSpeed) {\r\n\t\t\tthis.imageName = this._bombSprites[this._currentBombIdleIdx];\r\n\t\t\tthis._currentBombIdleIdx = (this._currentBombIdleIdx + 1) % this._bombSprites.length;\r\n\t\t\tthis._currentTick = time;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tprivate async _BombTimerStart() {\r\n\t\tLogger.getInstance().debug(\"BOMB TIMER STARTED\");\r\n\t\tawait Util.sleep(_BOMB_TIME_OUT);\r\n\t\tLogger.getInstance().debug(\"KABOOM\");\r\n\t\tawait this._processExplosion();\r\n\t\tLogger.getInstance().debug(\"BOMB DELETE\");\r\n\t\tthis.toDelete = true;\r\n\t}\r\n\r\n\tprivate async _processExplosion(): Promise<boolean> {\r\n\t\treturn new Promise<boolean>((r, e) => {\r\n\t\t\ttry {\r\n\t\t\t\tthis._kaboom = true;\r\n\t\t\t\tthis.imageName = \"\";\r\n\t\t\t\tthis._currentTick = 0;\r\n\t\t\t\tthis._bombAnimObj = new BombExplosion(this.currentMapPosition.x, this.currentMapPosition.y, this._bombLength);\r\n\r\n\t\t\t\tthis._bombAnimObj.onAnimEnd = () => {\r\n\t\t\t\t\tMapTile.getInstance().UnMarkTileBomb(this.x,this.y);\r\n\t\t\t\t\tr(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\t\t\t\tLogger.getInstance().error(err.message);\r\n\t\t\t\te(false);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport class BombManager extends Entity {\r\n\tprivate static _instance: BombManager = null;\r\n\tprivate _bombs: Bomb[] = [];\r\n\tprivate _MapTile: MapTile = MapTile.getInstance();\r\n\tprivate _MaxBomb: number = 1;\r\n\r\n\tconstructor() {\r\n\t\tsuper(0, 0, \"\", 0);\r\n\t}\r\n\r\n\tpublic static getInstance(): BombManager {\r\n\t\tif (BombManager._instance == null) {\r\n\r\n\t\t\tBombManager._instance = new BombManager();\r\n\t\t}\r\n\t\treturn BombManager._instance;\r\n\t}\r\n\r\n\tpublic SpawnBomb(posX: number, posY: number): Util.cRectangle {\r\n\t\tif (this._bombs.length >= this._MaxBomb)\r\n\t\t\treturn null;\r\n\r\n\t\tlet vec2 = this._MapTile.getScreenToTilePosition(posX, posY);\r\n\t\tlet found = false;\r\n\t\t//check if current tile is valid\r\n\t\tfor (let bomb of this._bombs) {\r\n\t\t\tif (bomb.currentMapPosition.x == vec2.x &&\r\n\t\t\t\tbomb.currentMapPosition.y == vec2.y)\r\n\t\t\t\tfound = true;\r\n\t\t}\r\n\r\n\t\tif (!found) {\r\n\t\t\tthis._bombs.push(new Bomb(vec2.x, vec2.y));\r\n\t\t}\r\n\r\n\t\treturn this._MapTile.GetTileBounds(vec2.x,vec2.y);\r\n\t}\r\n\r\n\tpublic Update(delta: number): void {\r\n\t\tsuper.Update(delta);\r\n\r\n\t\tthis._bombs.forEach((bomb, idx, bombs) => {\r\n\t\t\tbomb.Update(delta);\r\n\r\n\t\t\tif (bomb.toDelete) {\r\n\t\t\t\tbombs.splice(bombs.indexOf(bomb), 1);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n\t\tsuper.Draw(delta, ctx);\r\n\t\tthis._bombs.forEach((bomb) => {\r\n\t\t\tbomb.Draw(delta, ctx);\r\n\t\t});\r\n\t}\r\n}","import { SpriteSheet } from '../spritesheet'\r\nimport { Logger } from '../logger'\r\n\r\nexport class Entity {\r\n    public id: number;\r\n    public x: number;\r\n    public y: number;\r\n    public isVisible: boolean = true;\r\n    public imageName: string = \"\";\r\n    public textureIDX: number;\r\n\r\n    private _SpriteSheet: SpriteSheet = SpriteSheet.getInstance();\r\n\r\n    constructor(paramx: number, paramy: number, img: string, textID: number) {\r\n        this.x = paramx;\r\n        this.y = paramy;\r\n        this.imageName = img;\r\n        this.textureIDX = textID;\r\n\r\n    }\r\n\r\n    public Update(delta: number): void {\r\n\r\n\r\n    }\r\n\r\n    public Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible || this.imageName === \"\")\r\n            return;\r\n\r\n        try{\r\n                ctx.save();\r\n                ctx.translate(this.x, this.y);\r\n                this._SpriteSheet.Draw(0,0,this.textureIDX,this.imageName,ctx);\r\n                ctx.restore();\r\n        }\r\n        catch(e) {\r\n            Logger.getInstance().error(\"Error drawing [\" + this.imageName +\"] :\" + e.message , this.imageName);\r\n        }\r\n    }\r\n}","// import  { Entity } from './entity'\r\nimport * as Util from '../util'\r\nimport { SpriteSheet } from '../spritesheet'\r\nimport { Logger } from '../logger'\r\n\r\nexport interface IMapTileOption {\r\n    width: number,\r\n    height: number,\r\n    tileWidth: 16,\r\n    tileHeight: 16,\r\n    breakBlockChance: number,\r\n    blockImg: string,\r\n    groundImg: string,\r\n    ground2Img: string,\r\n    breakableImg: string\r\n}\r\n\r\nexport enum Block {\r\n    BLOCK = 0,\r\n    GROUND,\r\n    GROUND2,\r\n    BREAKBLOCK,\r\n    GROUNDBOMB,\r\n    GROUNDBOMB_PASS,\r\n}\r\n\r\nclass BreakBlockAnim {\r\n    private _BreakBlockAnim: string[] = [\r\n        'block_break_1.png',\r\n        'block_break_2.png',\r\n        'block_break_3.png',\r\n        'block_break_4.png',\r\n        'block_break_5.png'\r\n    ];\r\n\r\n    private _currentTick: number = 0;\r\n    private _animSpeed: number = 150;\r\n    private _currentAnimIdx: number = 0;\r\n\r\n    public onAnimEnd: () => void;\r\n\r\n    private _SpriteSheet: SpriteSheet = SpriteSheet.getInstance();\r\n\r\n    private tileX: number = -1;\r\n    private tileY: number = -1;\r\n\r\n    private screenX: number = -1;\r\n    private screenY: number = -1;\r\n\r\n    private _isDone: boolean = false;\r\n\r\n    constructor(_tileX: number, _tileY: number, _onAnimEnd: ()=>void) {\r\n        this.tileX = _tileX;\r\n        this.tileY = _tileY;\r\n\r\n        var vec2 = MapTile.getInstance().getTileScreenPosition(_tileX, _tileY);\r\n        this.screenX = vec2.x;\r\n        this.screenY = vec2.y;\r\n\r\n        this.onAnimEnd = _onAnimEnd;\r\n    }\r\n\r\n    public update() {\r\n        if (this._isDone) return;\r\n\r\n        var time = Date.now();\r\n        if ((time - this._currentTick) > this._animSpeed) {\r\n            this._currentTick = time;\r\n            this._currentAnimIdx++;\r\n            if (this._currentAnimIdx >= this._BreakBlockAnim.length) {\r\n                this.onAnimEnd(this);\r\n                this._isDone = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    public Draw(ctx: CanvasRenderingContext2D) {\r\n        this.update();\r\n\r\n        if (this._isDone || this._currentAnimIdx >= this._BreakBlockAnim.length) return;\r\n\r\n        ctx.save();\r\n        ctx.translate(this.screenX, this.screenY);\r\n        this._SpriteSheet.Draw(0,0, 1, this._BreakBlockAnim[this._currentAnimIdx], ctx);\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nexport class MapTile {\r\n    private static _instance: MapTile = null;\r\n\r\n    private _defaultMapTileOption: IMapTileOption = {\r\n        width: 21,\r\n        height: 15,\r\n        tileWidth: 16,\r\n        tileHeight: 16,\r\n        breakBlockChance: 10,\r\n        blockImg: 'blocks_02.png',\r\n        groundImg: 'blocks_04.png',\r\n        ground2Img: 'blocks_05.png',\r\n        breakableImg: 'blocks_03.png'\r\n    };\r\n\r\n    private _mapOption: IMapTileOption;\r\n\r\n    private _mapData: Block[] = [];\r\n\r\n    private _SpriteSheet: SpriteSheet;\r\n\r\n    private _BlockSprites: string[];\r\n\r\n    private _logger: Logger = Logger.getInstance();\r\n\r\n    private _blockAnim: BreakBlockAnim[] = [];\r\n\r\n    constructor(maptileoption?: IMapTileOption) {\r\n        if (MapTile._instance) {\r\n            throw new Error('Logger is a singleton');\r\n        }\r\n\r\n        this._initialize(maptileoption);\r\n\r\n        MapTile._instance = this;\r\n        return MapTile._instance;\r\n    }\r\n\r\n    public static getInstance(): MapTile {\r\n        if (MapTile._instance == null) {\r\n\r\n            MapTile._instance = new MapTile();\r\n        }\r\n        return MapTile._instance;\r\n    }\r\n\r\n    private _initialize(maptileoption?: IMapTileOption) {\r\n        this._mapOption = Util.extend(this._defaultMapTileOption, maptileoption);\r\n\r\n        this._BlockSprites = [\r\n            this._mapOption.blockImg,\r\n            this._mapOption.groundImg,\r\n            this._mapOption.ground2Img,\r\n            this._mapOption.breakableImg,\r\n            this._mapOption.groundImg,\r\n            this._mapOption.groundImg,\r\n        ];\r\n\r\n        this._mapData.length = 0;\r\n\r\n        this._SpriteSheet = SpriteSheet.getInstance();\r\n\r\n        this.GenerateMap(this._mapOption);\r\n    }\r\n\r\n    public GenerateMap(option: IMapTileOption) {\r\n        let count = option.width * option.height;\r\n\r\n        for (let x = 0; x < count; x++) {\r\n            if (x < this._mapOption.width) {\r\n                this._mapData.push(Block.BLOCK);\r\n            }\r\n            else if ((x % this._mapOption.width) == 0) {\r\n                this._mapData.push(Block.BLOCK);\r\n            }\r\n            else if ((this._mapOption.width - (x % this._mapOption.width)) == 1) {\r\n                this._mapData.push(Block.BLOCK);\r\n            }\r\n            else if (x > (this._mapOption.width * (option.height - 1))) {\r\n                this._mapData.push(Block.BLOCK);\r\n            }\r\n            else {\r\n                let block = Block.BREAKBLOCK;\r\n\r\n                let col = x % this._mapOption.width;\r\n                let row = Math.floor(x / option.width);\r\n\r\n                if (!(Math.floor(x / this._mapOption.width) % 2) &&\r\n                    !((x % this._mapOption.width) % 2)) {\r\n                    block = Block.BLOCK;\r\n                }\r\n                else if (\r\n                    (col < 4 && row == 1)\r\n                    || (col < 4 && row == (this._mapOption.height - 2))\r\n                    || (col < this._mapOption.width && col > (this._mapOption.width - 5) && row == 1)\r\n                    || (col < this._mapOption.width && col > (this._mapOption.width - 5) && row == (this._mapOption.height - 2))\r\n\r\n                    || (col == 1 && row < 3)\r\n                    || (col == (this._mapOption.width - 2) && row < 3)\r\n                    || (col == 1 && (row > (this._mapOption.height - 4) && row < this._mapOption.height))\r\n                    || (col == (this._mapOption.width - 2) && row > (this._mapOption.height - 4) && row < this._mapOption.height)\r\n                ) {\r\n                    block = Block.GROUND;\r\n                } else {\r\n                    let rand = ((Math.random() * 100) + 1) >  this._mapOption.breakBlockChance;\r\n                    block = rand ? Block.GROUND : Block.BREAKBLOCK;\r\n                }\r\n\r\n                this._mapData.push(block);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n        this._mapData.forEach((tile_value, index) => {\r\n            this._DrawTile(delta, ctx, tile_value, index);\r\n        });\r\n\r\n        this._blockAnim.forEach((block)=>{\r\n            block.Draw(ctx);\r\n        });\r\n\r\n    }\r\n\r\n    private _DrawTile(delta: number, ctx: CanvasRenderingContext2D, tile_value: number, index: number): void {\r\n        ctx.save();\r\n\r\n        let frame = this._SpriteSheet.frames[this._BlockSprites[tile_value]];\r\n\r\n        let x = (index % this._mapOption.width) * frame.w;\r\n\r\n        let y = (index > 0) ? (Math.floor(index / this._mapOption.width) * frame.h) : 0;\r\n\r\n        ctx.translate(x, y);\r\n\r\n        ctx.drawImage(this._SpriteSheet._image[1],\r\n            frame.x, frame.y,\r\n            frame.w, frame.h,\r\n            0, 0,\r\n            frame.w, frame.h);\r\n        ctx.restore();\r\n    }\r\n\r\n    public getTile(x: number, y: number): Block {\r\n        return this._mapData[x + (y * this._mapOption.width)];\r\n    }\r\n\r\n    public getTileScreenPosition(x: number, y: number): Util.Vector2 {\r\n        let vec2 = { x: 0, y: 0 };\r\n        let index = x + (y * this._mapOption.width);\r\n        let frame = this._SpriteSheet.frames[this._BlockSprites[0]];\r\n\r\n        vec2.x = (index % this._mapOption.width) * frame.w;\r\n        vec2.y = (index > 0) ? (Math.floor(index / this._mapOption.width) * frame.h) : 0;\r\n\r\n        return vec2;\r\n    }\r\n\r\n    public getScreenToTilePosition(x: number, y: number): Util.Vector2 {\r\n        let vec2 = { x: 0, y: 0 };\r\n        let frame = this._SpriteSheet.frames[this._BlockSprites[0]];\r\n\r\n        vec2.x = Math.floor(x / frame.w);\r\n        vec2.y = Math.floor(y / frame.h);\r\n\r\n        return vec2;\r\n    }\r\n\r\n    public checkMoveForCollisionX(posX: number, posY: number, boundX: number, boundY: number, intent: number): number {\r\n        let newposition = posX;\r\n        let collide = true;\r\n\r\n        let checkLeftPos = Math.floor((posX + intent) / this._mapOption.tileWidth);\r\n        let checkRightPos = Math.floor((posX + intent + boundX) / this._mapOption.tileWidth);\r\n        // let checkPos = Math.floor((posX + intent + boundX) / this._mapOption.tileWidth);\r\n\r\n        let tileY = Math.floor((posY) / this._mapOption.tileHeight);\r\n        let tileBottomY = Math.floor((posY + boundY) / this._mapOption.tileHeight);\r\n\r\n        if (this._mapData[checkLeftPos + (tileY * this._mapOption.width)] === Block.GROUND\r\n            && this._mapData[checkRightPos + (tileY * this._mapOption.width)] === Block.GROUND\r\n            && this._mapData[checkLeftPos + (tileBottomY * this._mapOption.width)] === Block.GROUND\r\n            && this._mapData[checkRightPos + (tileBottomY * this._mapOption.width)] === Block.GROUND) {\r\n            newposition += intent;\r\n            collide = false;\r\n        }\r\n\r\n        return newposition;\r\n    }\r\n\r\n    public checkMoveForCollisionY(posX: number, posY: number, boundX: number, boundY: number, intent: number): number {\r\n        let newposition = posY;\r\n        let collide = true;\r\n\r\n        let checkTopPos = Math.floor((posY + intent) / this._mapOption.tileWidth);\r\n        let checkBottomPos = Math.floor((posY + intent + boundY) / this._mapOption.tileWidth);\r\n\r\n        let tileX = Math.floor((posX) / this._mapOption.tileWidth);\r\n        let tileRightX = Math.floor((posX + boundX) / this._mapOption.tileWidth);\r\n\r\n        if ((this._mapData[tileX + (checkTopPos * this._mapOption.width)] === Block.GROUND)\r\n            && (this._mapData[tileX + (checkBottomPos * this._mapOption.width)] === Block.GROUND)\r\n            && (this._mapData[tileRightX + (checkTopPos * this._mapOption.width)] === Block.GROUND)\r\n            && (this._mapData[tileRightX + (checkBottomPos * this._mapOption.width)] === Block.GROUND)) {\r\n            newposition += intent;\r\n            collide = false;\r\n        }\r\n\r\n        return newposition;\r\n    }\r\n\r\n    public DestroyTile(tilex: number, tiley: number) {\r\n        this._blockAnim.push(new BreakBlockAnim(tilex,tiley,(block)=>{\r\n            var idx = this._blockAnim.indexOf(block);\r\n            this._blockAnim.splice(idx,1);\r\n        }));\r\n\r\n        this._mapData[tilex + (tiley * this._mapOption.width)] = Block.GROUND;\r\n    }\r\n\r\n    public GetTileBounds(tilex: number, tiley: number): Util.cRectangle {\r\n        let vec2 = this.getTileScreenPosition(tilex,tiley);\r\n\r\n        return new Util.cRectangle(vec2.x,vec2.y,this._mapOption.tileWidth,this._mapOption.tileHeight);\r\n    }\r\n\r\n    public MarkTileBomb(posX: number, posY: number): Util.cRectangle {\r\n        let tile = this.getScreenToTilePosition(posX,posY);\r\n\r\n        this._mapData[tile.x + (tile.y * this._mapOption.width)] = Block.GROUNDBOMB;\r\n\r\n        this._logger.debug(\"MarkTileBomb x {0} y {1}\", tile.x,tile.y);\r\n\r\n        return this.GetTileBounds(tile.x,tile.y);\r\n    }\r\n\r\n    public UnMarkTileBomb(posX: number, posY: number): Util.cRectangle {\r\n        let tile = this.getScreenToTilePosition(posX,posY);\r\n\r\n        this._logger.debug(\"UnMarkTileBomb x {0} y {1}\", tile.x,tile.y);\r\n\r\n        if(this._mapData[tile.x + (tile.y * this._mapOption.width)] !== Block.GROUNDBOMB)\r\n            throw new Error(\"tile is not groundbomb\");\r\n\r\n        this._mapData[tile.x + (tile.y * this._mapOption.width)] = Block.GROUND;\r\n\r\n        return this.GetTileBounds(tile.x,tile.y);\r\n    }\r\n}\r\n","import { Entity } from './entity'\r\nimport { MapTile, Block } from './map'\r\nimport { Logger } from '../logger'\r\nimport * as Util from '../util'\r\nimport { SpriteSheet } from '../spritesheet'\r\nimport { Player } from './player'\r\n\r\nenum DIRECTION {\r\n\tNULL = -1,\r\n\tUP = 0,\r\n\tDOWN,\r\n\tLEFT,\r\n\tRIGHT,\r\n\tCOUNT\r\n}\r\n\r\nexport class Monster extends Entity {\r\n\tprivate _currentPosition: Util.Vector2;\r\n\r\n\tprivate _offsetPosition: Util.Vector2 = new Util.Vector2(1, -10);\r\n\r\n\tprivate _mapTile: MapTile = MapTile.getInstance();\r\n\r\n\t/**\r\n\t * vertical move speed of monster\r\n\t * @type {number}\r\n\t */\r\n\tprivate _monsterVectorY: number = 0;\r\n\r\n\t/**\r\n\t * horizontal move speed of monster\r\n\t * @type {number}\r\n\t */\r\n\tprivate _monsterVectorX: number = 0;\r\n\r\n\t/**\r\n\t * target X screen position of monster movement\r\n\t * @type {number}\r\n\t */\r\n\tprivate _monsterTargetX: number = 0;\r\n\r\n\t/**\r\n\t * target Y screen position of monster movement\r\n\t * @type {number}\r\n\t */\r\n\tprivate _monsterTargetY: number = 0;\r\n\r\n\tprivate _logger: Logger = Logger.getInstance();\r\n\r\n\tprivate _monsterWidth: number = 15;\r\n\tprivate _monsterHeight: number = 15;\r\n\r\n\tprivate _stopThinking: boolean = false;\r\n\tprivate _maxTileWalk: number = 10;\r\n\t// private _walkPath: Util.Vector2[] = [];\r\n\r\n\tprivate _MonsterManager: MonsterManager;\r\n\r\n\tprivate _moveDone: () => void;\r\n\r\n\tpublic isHit: boolean = false;\r\n\r\n\tprivate _moveDirection: DIRECTION = DIRECTION.UP;\r\n\r\n\tprivate _maxThinkCount: number = 0;\r\n\r\n\tprivate _EndGame: () => void = null;\r\n\r\n\tprivate _StopMonsters: boolean = false;\r\n\r\n\tconstructor(manager: MonsterManager, tilex: number, tiley: number) {\r\n\t\tsuper(0, 0, \"front_1_enemy.png\", 2);\r\n\r\n\t\tthis.Spawn(manager, tilex, tiley);\r\n\t}\r\n\r\n\tpublic Spawn(manager: MonsterManager, tilex: number, tiley: number) {\r\n\t\tthis._MonsterManager = manager;\r\n\t\tthis._currentPosition = this._mapTile.getTileScreenPosition(tilex, tiley);\r\n\t\tthis._isHit = false;\r\n\t\tthis.UpdatePosition();\r\n\t\tthis._Think();\r\n\t}\r\n\r\n\tpublic Update(delta: number): void {\r\n\t\tsuper.Update(delta);\r\n\t\tthis.UpdatePosition();\r\n\t}\r\n\r\n\tprivate UpdatePosition() {\r\n\t\tthis._currentPosition.x += this._monsterVectorX;\r\n\t\tthis._currentPosition.y += this._monsterVectorY;\r\n\r\n\t\tif (this._currentPosition.x === this._monsterTargetX\r\n\t\t\t&& this._currentPosition.y === this._monsterTargetY) {\r\n\t\t\tthis._monsterVectorX = 0;\r\n\t\t\tthis._monsterVectorY = 0;\r\n\r\n\t\t\tthis._moveDone();\r\n\t\t}\r\n\r\n\t\tthis.x = this._currentPosition.x + this._offsetPosition.x;\r\n\t\tthis.y = this._currentPosition.y + this._offsetPosition.y;;\r\n\t}\r\n\r\n\tpublic StopMonsters(): void {\r\n\t\tthis._StopMonsters = true;\r\n\t\tthis._moveDone();\r\n\t}\r\n\r\n\tpublic Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n\t\tsuper.Draw(delta, ctx);\r\n\r\n\t}\r\n\r\n\tprivate _Think() {\r\n\t\tif (this.isHit || this._StopMonsters) return;\r\n\r\n\t\tif (this._maxThinkCount < 4) {\r\n\t\t\tlet currentTilePos = this._mapTile.getScreenToTilePosition(this._currentPosition.x, this._currentPosition.y);\r\n\t\t\tswitch (this._moveDirection) {\r\n\t\t\t\tcase DIRECTION.UP:\r\n\t\t\t\t\tlet block = this._mapTile.getTile(currentTilePos.x, currentTilePos.y - 1);\r\n\t\t\t\t\tif (block !== Block.GROUND) {\r\n\t\t\t\t\t\tthis._moveDirection = DIRECTION.DOWN;\r\n\t\t\t\t\t\tthis._maxThinkCount++;\r\n\t\t\t\t\t\tthis._Think();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase DIRECTION.DOWN:\r\n\t\t\t\t\tlet block = this._mapTile.getTile(currentTilePos.x, currentTilePos.y + 1);\r\n\t\t\t\t\tif (block !== Block.GROUND) {\r\n\t\t\t\t\t\tthis._moveDirection = DIRECTION.RIGHT;\r\n\t\t\t\t\t\tthis._maxThinkCount++;\r\n\t\t\t\t\t\tthis._Think();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase DIRECTION.RIGHT:\r\n\t\t\t\t\tlet block = this._mapTile.getTile(currentTilePos.x + 1, currentTilePos.y);\r\n\t\t\t\t\tif (block !== Block.GROUND) {\r\n\t\t\t\t\t\tthis._moveDirection = DIRECTION.LEFT;\r\n\t\t\t\t\t\tthis._maxThinkCount++;\r\n\t\t\t\t\t\tthis._Think();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase DIRECTION.LEFT:\r\n\t\t\t\t\tlet block = this._mapTile.getTile(currentTilePos.x - 1, currentTilePos.y);\r\n\t\t\t\t\tif (block !== Block.GROUND) {\r\n\t\t\t\t\t\tthis._moveDirection = DIRECTION.UP;\r\n\t\t\t\t\t\tthis._maxThinkCount++;\r\n\t\t\t\t\t\tthis._Think();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// code...\r\n\t\t\t\t\t// dont go here!!!\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._moveDirection = DIRECTION.NULL;\r\n\t\t}\r\n\r\n\t\tthis._ProcessMovement(this._moveDirection);\r\n\t}\r\n\r\n\tprivate async _ProcessMovement(moveDirection: DIRECTION) {\r\n\t\tawait this._MoveToTile(moveDirection);\r\n\t\tthis._maxThinkCount = 0;\r\n\t\tthis._Think();\r\n\t}\r\n\r\n\tprivate _MoveToTile(moveDir: DIRECTION): Promise<boolean> {\r\n\t\treturn new Promise<boolean>((r, e) => {\r\n\t\t\ttry {\r\n\t\t\t\tlet currentTilePos = this._mapTile.getScreenToTilePosition(this._currentPosition.x, this._currentPosition.y);\r\n\t\t\t\tlet path = new Util.Vector2(0, 0);\r\n\r\n\t\t\t\tswitch (moveDir) {\r\n\t\t\t\t\tcase DIRECTION.UP:\r\n\t\t\t\t\t\tpath.y = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase DIRECTION.DOWN:\r\n\t\t\t\t\t\tpath.y = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase DIRECTION.RIGHT:\r\n\t\t\t\t\t\tpath.x = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase DIRECTION.LEFT:\r\n\t\t\t\t\t\tpath.x = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// code...\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._monsterVectorX = path.x;\r\n\t\t\t\tthis._monsterVectorY = path.y;\r\n\r\n\r\n\t\t\t\tlet targetVec2 = this._mapTile.getTileScreenPosition(currentTilePos.x + path.x, currentTilePos.y + path.y);\r\n\r\n\t\t\t\tthis._monsterTargetX = targetVec2.x;\r\n\t\t\t\tthis._monsterTargetY = targetVec2.y;\r\n\r\n\t\t\t\tthis._moveDone = () => {\r\n\t\t\t\t\tr(true);\r\n\t\t\t\t};\r\n\t\t\t} catch (err) {\r\n\t\t\t\te(err);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic GetHitBounds(): Util.cRectangle {\r\n\t\tlet rect = new Util.cRectangle(this._currentPosition.x, this._currentPosition.y, this._monsterWidth, this._monsterHeight);\r\n\t\treturn rect;\r\n\t}\r\n\r\n\tpublic async Die() {\r\n\t\tLogger.getInstance().debug(\"Monster Die!\");\r\n\t\tthis.isHit = true;\r\n\t\tthis.imageName = \"dead_1_enemy.png\";\r\n\t\tawait Util.sleep(1000);\r\n\t\tthis._MonsterManager.DeleteMonster(this);\r\n\t}\r\n}\r\n\r\nexport class MonsterManager {\r\n\tprivate static _instance: MonsterManager = null;\r\n\tprivate _Monsters: Monster[] = [];\r\n\tprivate _Player: Player = null;\r\n\r\n\tconstructor() {\r\n\t\tif (MonsterManager._instance) {\r\n\t\t\tthrow new Error('Logger is a singleton');\r\n\t\t}\r\n\t\tMonsterManager._instance = this;\r\n\t\treturn MonsterManager._instance;\r\n\t}\r\n\r\n\tpublic static getInstance(): MonsterManager {\r\n\t\tif (MonsterManager._instance == null) {\r\n\r\n\t\t\tMonsterManager._instance = new MonsterManager();\r\n\t\t}\r\n\t\treturn MonsterManager._instance;\r\n\t}\r\n\r\n\tpublic Update(delta: number): void {\r\n\t\tthis._Monsters.forEach((monster) => {\r\n\t\t\tmonster.Update(delta);\r\n\r\n\t\t\tif(this._Player.GetHitBounds().collides(monster.GetHitBounds())){\r\n\t\t\t\tthis._Player.Die();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t}\r\n\r\n\tpublic Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n\t\tthis._Monsters.forEach((monster) => {\r\n\t\t\tmonster.Draw(delta, ctx);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic SpawnMonster(tileX: number, tileY: number) {\r\n\t\tthis._Monsters.push(new Monster(this, tileX, tileY));\r\n\t}\r\n\r\n\tpublic init(player: Player, endgame: () => void) {\r\n\t\tthis._Player = player;\r\n\t\tthis._EndGame = endgame;\r\n\r\n\t\tthis._Monsters.length = 0;\r\n\r\n\t\tthis.SpawnMonster(1, 13);\r\n\t\tthis.SpawnMonster(19, 13);\r\n\t\tthis.SpawnMonster(19, 1);\r\n\t}\r\n\r\n\tpublic GetMonsters(): Monster[] {\r\n\t\treturn this._Monsters;\r\n\t}\r\n\r\n\tpublic GetPlayers(): Monster[] {\r\n\t\treturn this._Player;\r\n\t}\r\n\r\n\tpublic StopMonsters(): void {\r\n\t\tthis._Monsters.forEach((monster)=>{\r\n\t\t\tmonster.StopMonsters();\r\n\t\t});\r\n\t}\r\n\r\n\tpublic DeleteMonster(monster: Monster) {\r\n\t\tlet idx = this._Monsters.indexOf(monster);\r\n\t\tthis._Monsters[idx].isVisible = false;\r\n\r\n\t\tlet check = false;\r\n\t\tthis._Monsters.forEach((monster)=>{\r\n\t\t\tif(!check) check = monster.isVisible;\r\n\t\t});\r\n\r\n\t\tif(!check)\r\n\t\t\tthis._EndGame();\r\n\t}\r\n}","import { Entity } from './entity'\r\nimport { MapTile } from './map'\r\nimport { Logger } from '../logger'\r\nimport { BombManager } from './bomb-manager'\r\nimport * as Util from '../util'\r\n\r\nexport class Player extends Entity {\r\n\r\n\tprivate _currentPosition: Util.Vector2;\r\n\r\n\tprivate _offsetPosition: Util.Vector2 = new Util.Vector2(1, -10);\r\n\r\n\tprivate _mapTile: MapTile = MapTile.getInstance();\r\n\r\n\tprivate _playerSpeed: number = 1;\r\n\r\n\tprivate _logger: Logger = Logger.getInstance();\r\n\r\n\tprivate _bombManager: BombManager = BombManager.getInstance();\r\n\r\n\tprivate _playerWidth: number = 14;\r\n\tprivate _playerHeight: number = 14;\r\n\r\n\tprivate _IsDead: boolean = false;\r\n\r\n\tprivate _JustBombDroppedRect: Util.cRectangle = null;\r\n\r\n\tprivate _EndGame: ()=>void = null;\r\n\r\n\tconstructor(endgame: ()=>void) {\r\n\t\tsuper(0, 0, \"front_1.png\", 0);\r\n\r\n\t\tthis._EndGame = endgame;\r\n\r\n\t\tthis.Spawn();\r\n\t}\r\n\r\n\tpublic Spawn() {\r\n\t\tthis._IsDead = false;\r\n\t\tthis.imageName = \"front_1.png\";\r\n\t\tthis._currentPosition = this._mapTile.getTileScreenPosition(1, 1);\r\n\t\tthis.UpdatePosition();\r\n\r\n\t}\r\n\r\n\tpublic Update(delta: number): void {\r\n\t\tsuper.Update(delta);\r\n\t\tthis.UpdatePosition();\r\n\t}\r\n\r\n\tpublic MoveUp(): void {\r\n\t\tif(!this._IsDead)\r\n\t\t\tthis._currentPosition.y = this._mapTile.checkMoveForCollisionY(this._currentPosition.x,this._currentPosition.y, this._playerWidth, this._playerHeight , -this._playerSpeed);\r\n\t}\r\n\r\n\tpublic MoveDown(): void {\r\n\t\tif(!this._IsDead)\r\n\t\t\tthis._currentPosition.y = this._mapTile.checkMoveForCollisionY(this._currentPosition.x,this._currentPosition.y, this._playerWidth, this._playerHeight, this._playerSpeed);\r\n\t}\r\n\r\n\tpublic MoveLeft(): void {\r\n\t\tif(!this._IsDead)\r\n\t\t\tthis._currentPosition.x = this._mapTile.checkMoveForCollisionX(this._currentPosition.x,this._currentPosition.y, this._playerWidth, this._playerHeight, -this._playerSpeed);\r\n\t}\r\n\r\n\tpublic MoveRight(): void {\r\n\t\tif(!this._IsDead)\r\n\t\t\tthis._currentPosition.x = this._mapTile.checkMoveForCollisionX(this._currentPosition.x,this._currentPosition.y, this._playerWidth, this._playerHeight, this._playerSpeed);\r\n\t}\r\n\r\n\tpublic DropBomb(): void {\r\n\t\tif(!this._IsDead){\r\n\t\t\tlet justdropped = this._bombManager.SpawnBomb(this._currentPosition.x,this._currentPosition.y);\r\n\r\n\t\t\tif(justdropped!== null){\r\n\t\t    \tthis._JustBombDroppedRect = justdropped;\r\n\r\n\t\t    \tif(!this.GetHitBounds().collides(this._JustBombDroppedRect)){\r\n\t\t\t\t\tthis._mapTile.MarkTileBombPass(this._JustBombDroppedRect.x,this._JustBombDroppedRect.y);\r\n\t\t\t\t\tthis._JustBombDroppedRect = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if(this._JustBombDroppedRect === null)\r\n\t\t\t// \tthrow new error(\"this._JustBombDroppedRect is null!\", this._JustBombDroppedRect);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic async Die() {\r\n\t\tLogger.getInstance().debug(\"Player Die!\");\r\n\t\tthis._IsDead = true;\r\n\t\tthis.imageName = \"dead_1.png\";\r\n\t\tawait Util.sleep(1000);\r\n\t\tthis._EndGame();\r\n\t}\r\n\r\n\tpublic UpdatePosition() {\r\n\t\tthis.x = this._currentPosition.x + this._offsetPosition.x;\r\n\t\tthis.y = this._currentPosition.y + this._offsetPosition.y;\r\n\r\n\t\tif(this._JustBombDroppedRect !== null) {\r\n\t\t\tif(!this.GetHitBounds().collides(this._JustBombDroppedRect)){\r\n\t\t\t\tthis._mapTile.MarkTileBomb(this._JustBombDroppedRect.x,this._JustBombDroppedRect.y);\r\n\t\t\t\tthis._JustBombDroppedRect = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n\t\tsuper.Draw(delta, ctx);\r\n\r\n\t}\r\n\r\n\tpublic GetHitBounds(): Util.cRectangle{\r\n\t\tlet rect = new Util.cRectangle(this._currentPosition.x,this._currentPosition.y,this._playerWidth,this._playerHeight);\r\n\t\treturn rect;\r\n\t}\r\n}\r\n","import { Logger } from './logger'\r\nimport { WindowManager } from './window-manager'\r\nimport { SpriteSheet } from './spritesheet'\r\nimport { State, MainGame } from './states/index'\r\n\r\nexport interface IGameOptions {\r\n  width?: number;\r\n\r\n  height?: number;\r\n\r\n  canvasElementId?: string;\r\n\r\n  spriteSheetUrl: string[];\r\n\r\n  timeScale: 1;\r\n}\r\n\r\nexport class Game {\r\n\r\n  public windowManager: WindowManager;\r\n\r\n  public spritesheet: SpriteSheet;\r\n\r\n  private _logger: Logger;\r\n\r\n  private _lastTime: number = Date.now();\r\n\r\n  private _timeScale: number = 1;\r\n\r\n  private _currentState: State;\r\n\r\n  constructor(options?: IGameOptions) {\r\n\r\n    this._logger = Logger.getInstance();\r\n\r\n    this._logger.debug(\"starting up the engine...\");\r\n\r\n    this.windowManager = new WindowManager(options);\r\n\r\n    this.spritesheet = new SpriteSheet(options.spriteSheetUrl);\r\n\r\n    this._timeScale = options.timeScale;\r\n\r\n    this.spritesheet.load().then(() => { this.start() });\r\n  }\r\n\r\n  public start() {\r\n    this._currentState = new MainGame();\r\n    this._currentTick = 0;\r\n    this._update();\r\n  }\r\n\r\n  _update(): void {\r\n    var elapsed = Math.floor(Date.now() - this._lastTime) || 1;\r\n    var delta = elapsed * this._timeScale;\r\n\r\n\r\n    this._currentState.Update(delta);\r\n    this._currentState.Draw(delta, this.windowManager.ctx);\r\n\r\n    requestAnimationFrame(this._update.bind(this))\r\n  }\r\n}\r\n\r\n","import * as Util from './util'\r\n\r\n\r\nconst enum KEYMAP {\r\n    UP = 87, // 'w'\r\n    DOWN = 83, // 's'\r\n    LEFT = 65, // 'a'\r\n    RIGHT = 68, // 'd'\r\n    BOMB = 32, // 'space'\r\n    ESC = 27, // 'esc'\r\n}\r\n\r\nexport interface InputOptions {\r\n    Up_KeyDown: () => void;\r\n    Down_KeyDown: () => void;\r\n    Left_KeyDown: () => void;\r\n    Right_KeyDown: () => void;\r\n    BOMB_KeyDown: () => void;\r\n    ESC_KeyDown: () => void;\r\n\r\n    Up_KeyUp: () => void;\r\n    Down_KeyUp: () => void;\r\n    Left_KeyUp: () => void;\r\n    Right_KeyUp: () => void;\r\n    BOMB_KeyUp: () => void;\r\n    ESC_KeyUp: () => void;\r\n}\r\n\r\n\r\nexport class InputController {\r\n    private _InputOptions: InputOptions;\r\n\r\n    private _keyPressed: { [key:number] : boolean };\r\n\r\n    constructor(options: InputOptions) {\r\n        this._InputOptions = options;\r\n\r\n        this._keyPressed = [];\r\n\r\n        this._keyPressed[KEYMAP.UP] = false;\r\n        this._keyPressed[KEYMAP.DOWN] = false;\r\n        this._keyPressed[KEYMAP.LEFT] = false;\r\n        this._keyPressed[KEYMAP.RIGHT] = false;\r\n        this._keyPressed[KEYMAP.BOMB] = false;\r\n        this._keyPressed[KEYMAP.ESC] = false;\r\n\r\n        window.addEventListener('keydown', (e)=> { this._KeyDownCallback(e)});\r\n        window.addEventListener('keyup', (e)=> { this._KeyUpCallback(e)});\r\n    }\r\n\r\n    public Update() {\r\n        if(this._keyPressed[KEYMAP.UP]) this._InputOptions.Up_KeyDown();\r\n        if(this._keyPressed[KEYMAP.DOWN]) this._InputOptions.Down_KeyDown();\r\n        if(this._keyPressed[KEYMAP.LEFT]) this._InputOptions.Left_KeyDown();\r\n        if(this._keyPressed[KEYMAP.RIGHT]) this._InputOptions.Right_KeyDown();\r\n        if(this._keyPressed[KEYMAP.BOMB]) this._InputOptions.BOMB_KeyDown();\r\n        if(this._keyPressed[KEYMAP.ESC]) this._InputOptions.ESC_KeyDown();\r\n\r\n    }\r\n\r\n    private _KeyDownCallback(e: KeyboardEvent) {\r\n        var kcode = e.which || e.keyCode;\r\n        this._keyPressed[kcode] = true;\r\n    }\r\n\r\n    private _KeyUpCallback(e: KeyboardEvent) {\r\n        var kcode = e.which || e.keyCode;\r\n        this._keyPressed[kcode] = false;\r\n    }\r\n\r\n    public clearInputs () {\r\n        this._InputOptions = null;\r\n    }\r\n}","export enum LogLevel {\r\n   Debug,\r\n   Info,\r\n   Warn,\r\n   Error,\r\n   Fatal\r\n}\r\n\r\nexport class Logger {\r\n   private static _instance: Logger = null;\r\n\r\n   constructor() {\r\n      if (Logger._instance) {\r\n         throw new Error('Logger is a singleton');\r\n      }\r\n      Logger._instance = this;\r\n      return Logger._instance;\r\n   }\r\n\r\n   public defaultLevel: LogLevel = LogLevel.Info;\r\n\r\n   public static getInstance(): Logger {\r\n      if (Logger._instance == null) {\r\n\r\n         Logger._instance = new Logger();\r\n      }\r\n      return Logger._instance;\r\n   }\r\n\r\n   private _log(level: LogLevel, args: any[]): void {\r\n      if (level == null) {\r\n         level = this.defaultLevel;\r\n      }\r\n\r\n      // Create a new console args array\r\n      var consoleArgs: any[] = [];\r\n      consoleArgs.unshift.apply(consoleArgs, args);\r\n      consoleArgs.unshift('[' + LogLevel[level] + '] : ');\r\n\r\n      if (level < LogLevel.Warn) {\r\n\r\n         // Call .log for Debug/Info\r\n         if (console.log.apply) {\r\n            // this is required on some older browsers that don't support apply on console.log :(\r\n            console.log.apply(console, consoleArgs);\r\n         } else {\r\n            console.log(consoleArgs.join(' '));\r\n         }\r\n      } else if (level < LogLevel.Error) {\r\n\r\n         // Call .warn for Warn\r\n         if (console.warn.apply) {\r\n            console.warn.apply(console, consoleArgs);\r\n         } else {\r\n            console.warn(consoleArgs.join(' '));\r\n         }\r\n      } else {\r\n\r\n         // Call .error for Error/Fatal\r\n         if (console.error.apply) {\r\n            console.error.apply(console, consoleArgs);\r\n         } else {\r\n            console.error(consoleArgs.join(' '));\r\n         }\r\n      }\r\n   }\r\n\r\n   public debug(...args: any[]): void {\r\n      this._log(LogLevel.Debug, args);\r\n   }\r\n\r\n   public info(...args: any[]): void {\r\n      this._log(LogLevel.Info, args);\r\n   }\r\n\r\n   public warn(...args: any[]): void {\r\n      this._log(LogLevel.Warn, args);\r\n   }\r\n\r\n   public error(...args: any[]): void {\r\n      this._log(LogLevel.Error, args);\r\n   }\r\n\r\n   public fatal(...args: any[]): void {\r\n      this._log(LogLevel.Fatal, args);\r\n   }\r\n}\r\n","import * as Utils from './util'\r\nimport { Logger } from './logger'\r\n\r\nexport class SpriteSheet {\r\n    private static _instance: SpriteSheet = null;\r\n\r\n    public frames: { [index: string]: Utils.cRectangle } = {};\r\n    public _image: HTMLImageElement[] = [];\r\n\r\n    private _imageUrls: string[] = [];\r\n    private _jsonUrls: string[] = [];\r\n\r\n    private _logger: Logger = Logger.getInstance();\r\n\r\n    constructor(url: string[]) {\r\n        if (SpriteSheet._instance) {\r\n            throw new Error('SpriteSheet is a singleton');\r\n        }\r\n\r\n        this._imageUrls = url;\r\n\r\n        var tempurl = url;\r\n\r\n        for (let x of tempurl) {\r\n            x = x.replace(\".png\", \"\") + \".json\";\r\n            this._jsonUrls.push(x);\r\n        }\r\n\r\n        SpriteSheet._instance = this;\r\n        return SpriteSheet._instance;\r\n    }\r\n\r\n\r\n    public static getInstance(): SpriteSheet {\r\n        if (SpriteSheet._instance == null) {\r\n\r\n            SpriteSheet._instance = new SpriteSheet(['']);\r\n        }\r\n        return SpriteSheet._instance;\r\n    }\r\n\r\n    public async load() {\r\n        try {\r\n            this._logger.debug('start loading spritesheet json..');\r\n\r\n            for (let jsonUrl of this._jsonUrls) {\r\n                this._logger.debug('loading spritesheet json: ' + jsonUrl);\r\n                let j = await Utils.getXMLRequest(jsonUrl);\r\n                this._onRead(JSON.parse(j));\r\n            }\r\n\r\n            this._logger.debug('start loading spritesheet png..');\r\n\r\n            for (let imageUrl of this._imageUrls) {\r\n                this._logger.debug('loading spritesheet png: ' + imageUrl);\r\n                this._image.push(await this._loadImage(imageUrl));\r\n            }\r\n\r\n            this._logger.debug(this._image);\r\n            this._logger.debug('finished loading spritesheets..');\r\n        }\r\n        catch (err) {\r\n            this._logger.debug('error loading spritesheet..' + err.message);\r\n        }\r\n\r\n    }\r\n\r\n    private _loadImage(url: string): Promise<HTMLImageElement> {\r\n        return new Promise(function(resolve, reject) {\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                resolve(img);\r\n            }\r\n            img.onerror = function() {\r\n                reject(null);\r\n            }\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n    private _onRead(data: any) {\r\n        var temp_frame: Utils.cRectangle;\r\n\r\n        for (var frame_name in data.frames) {\r\n            var sprite_data: any = data.frames[frame_name];\r\n\r\n            temp_frame = new Utils.cRectangle(sprite_data.frame.x,\r\n                sprite_data.frame.y,\r\n                sprite_data.frame.w,\r\n                sprite_data.frame.h);\r\n\r\n            this.frames[frame_name] = temp_frame;\r\n        }\r\n    }\r\n\r\n    public Draw(x: number, y: number, texture: number, spritename: string, ctx: CanvasRenderingContext2D) {\r\n        try {\r\n            ctx.drawImage(\r\n                this._image[texture],\r\n                this.frames[spritename].x,\r\n                this.frames[spritename].y,\r\n                this.frames[spritename].w,\r\n                this.frames[spritename].h,\r\n                x,\r\n                y,\r\n                this.frames[spritename].w,\r\n                this.frames[spritename].h);\r\n        } catch (err) {\r\n            Logger.getInstance().error(\"error drawing \" + spritename);\r\n        }\r\n\r\n    }\r\n}","export * from './state'\r\nexport * from './titlescreen'\r\nexport * from './maingame'","import { State } from './state'\r\nimport { Entity } from '../entities/entity'\r\nimport { MapTile } from '../entities/map'\r\nimport { Player } from '../entities/player'\r\nimport { InputController, InputOptions } from '../input'\r\nimport { BombManager } from '../entities/bomb-manager'\r\nimport { MonsterManager } from '../entities/monster-manager'\r\nimport { WindowManager } from '../window-manager'\r\nimport { Logger } from '../logger'\r\n\r\nexport class MainGame extends State {\r\n    // private SprTitleScreen: Entity;\r\n    private _MapTile: MapTile;\r\n    private _Player: Player;\r\n    private _InputController: InputController;\r\n    private _BombManager: BombManager = BombManager.getInstance();\r\n    private _MonsterManager: MonsterManager = MonsterManager.getInstance();\r\n    private _WindowManager: WindowManager = WindowManager.getInstance();\r\n\r\n    private _isPause: boolean = false;\r\n\r\n    private _mouseDownListener: ()=>void = null;\r\n\r\n    constructor() {\r\n        super();\r\n        this._MapTile = MapTile.getInstance();\r\n        this.addEntities(this._BombManager);\r\n\r\n        this._Player = new Player(()=>{this.EndGame();});\r\n        this.addEntities(this._Player);\r\n\r\n        this._InputController = new InputController(\r\n            {\r\n                Up_KeyDown: ()=>{this._Player.MoveUp();},\r\n                Down_KeyDown: ()=>{this._Player.MoveDown();},\r\n                Left_KeyDown: ()=>{this._Player.MoveLeft();},\r\n                Right_KeyDown: ()=>{this._Player.MoveRight();},\r\n                BOMB_KeyDown: ()=>{this._Player.DropBomb();},\r\n                ESC_KeyDown: (): void => {},\r\n\r\n                Up_KeyUp: ()=>{this._Player.MoveUp();},\r\n                Down_KeyUp: ()=>{this._Player.MoveDown();},\r\n                Left_KeyUp: ()=>{this._Player.MoveLeft();},\r\n                Right_KeyUp: ()=>{this._Player.MoveRight();},\r\n                BOMB_KeyUp: ()=>{this._Player.DropBomb();},\r\n                ESC_KeyUp: (): void => {}\r\n            }\r\n        );\r\n\r\n        this._MonsterManager.init(this._Player,()=>{this.EndGame();});\r\n\r\n        this._mouseDownListener = ()=>{this.InitGame();};\r\n    }\r\n\r\n    public EndGame(): void {\r\n        this._isPause = true;\r\n        this._MonsterManager.StopMonsters();\r\n        window.addEventListener(\"mousedown\", this._mouseDownListener);\r\n    }\r\n\r\n    public InitGame (): void {\r\n        Logger.getInstance().debug(\"Init Game..\");\r\n        this._isPause = false;\r\n\r\n        this._Player.Spawn();\r\n        this._MonsterManager.init(this._Player,()=>{this.EndGame();});\r\n\r\n        window.removeEventListener(\"mousedown\", this._mouseDownListener);\r\n    }\r\n\r\n    public Update(delta: number): void {\r\n        super.Update(delta);\r\n\r\n        if(!this._isPause) {\r\n            this._MonsterManager.Update(delta);\r\n            this._InputController.Update();\r\n        }\r\n    }\r\n\r\n    public Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n        this._MapTile.Draw(delta, ctx);\r\n        super.Draw(delta, ctx);\r\n        this._MonsterManager.Draw(delta,ctx);\r\n\r\n        if(this._isPause) {\r\n            ctx.save();\r\n            ctx.font = \"25px Arial\";\r\n            let centerX = this._WindowManager.canvasWidth / 2;\r\n            let centerY = this._WindowManager.canvasHeight / 2;\r\n            ctx.fillStyle = \"white\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillText(\"Game Over!\",centerX,centerY - 50);\r\n            ctx.strokeText(\"Game Over!\",centerX,centerY - 50);\r\n            ctx.fillText(\"Click on screen to play again\",centerX,centerY);\r\n            ctx.strokeText(\"Click on screen to play again\",centerX,centerY);\r\n\r\n            ctx.restore();\r\n        }\r\n    }\r\n}","import { Entity } from './entity'\r\n\r\nexport class State {\r\n    entities: Array<Entity>;\r\n\r\n    constructor() {\r\n        this.entities = [];\r\n    }\r\n\r\n    public Exit() {\r\n        this.entities.length = 0;\r\n    }\r\n\r\n    public addEntities(entity: Entity): Number {\r\n        return this.entities.push(entity);\r\n    }\r\n\r\n    public removeEntities(entity: Entity): Number {\r\n        var index = this.entities.indexOf(entity, 0);\r\n        if (index > -1) {\r\n           this.entities.splice(index, 1);\r\n        }\r\n        return this.entities.length;\r\n    }\r\n\r\n    public Update(delta: Number): void {\r\n        for (var entity of this.entities) {\r\n            entity.Update(delta);\r\n        }\r\n\r\n    }\r\n\r\n    public Draw(delta: Number, ctx: CanvasRenderingContext2D): void {\r\n        for (var entity of this.entities) {\r\n            entity.Draw(delta,ctx);\r\n        }\r\n    }\r\n}","import { State } from './state'\r\nimport { Entity } from '../entities/entity'\r\n\r\n\r\nexport class TitleScreen extends State {\r\n    private SprTitleScreen: Entity;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.SprTitleScreen = new Entity(0, 0, 'titlescreen/background.png');\r\n\r\n        this.addEntities(this.SprTitleScreen);\r\n    }\r\n\r\n    public Update(delta: number): void {\r\n        super.Update(delta);\r\n    }\r\n\r\n    public Draw(delta: Number, ctx: CanvasRenderingContext2D): void {\r\n        super.Draw(delta, ctx);\r\n    }\r\n}","import { Logger } from './logger'\r\n\r\n\r\n/**\r\n * https://developers.google.com/web/fundamentals/getting-started/primers/promises\r\n * @param  {string}       url [description]\r\n * @return {Promise<any>}     [description]\r\n */\r\nexport function getXMLRequest(url: string): Promise<any> {\r\n    // Return a new promise.\r\n    return new Promise<any>(function(resolve, reject) {\r\n        // Do the usual XHR stuff\r\n        var logger = Logger.getInstance();\r\n        var req = new XMLHttpRequest();\r\n\r\n\r\n        req.open('GET', url);\r\n\r\n        req.onload = function() {\r\n            // This is called even on 404 etc\r\n            // so check the status\r\n            if (req.readyState === XMLHttpRequest.DONE && req.status == 200) {\r\n                // Resolve the promise with the response text\r\n                resolve(req.response);\r\n            }\r\n            else {\r\n                // Otherwise reject with the status text\r\n                // which will hopefully be a meaningful erro\r\n                reject(Error(req.statusText));\r\n            }\r\n        };\r\n\r\n        // Handle network errors\r\n        req.onerror = function() {\r\n            reject(Error(\"Network Error\"));\r\n        };\r\n\r\n        // Make the request\r\n        req.send();\r\n    });\r\n}\r\n\r\nexport class Vector2 {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    constructor(_x: number, _y: number) {\r\n        this.x = _x;\r\n        this.y = _y;\r\n    }\r\n}\r\n\r\nexport class cRectangle {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, w: number = 1, h: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    within(outer_rect: cRectangle): boolean {\r\n        if (outer_rect.x > this.x) {\r\n            // this is not in it;\r\n            return false;\r\n        }\r\n        else if (outer_rect.y > this.y) {\r\n            return false;\r\n        }\r\n        else if (outer_rect.x + outer_rect.w < this.x + this.w) {\r\n            return false;\r\n        }\r\n        else if (outer_rect.y + outer_rect.h < this.y + this.h) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    collides(outer_rect: cRectangle): boolean {\r\n        // Logger.getInstance().debug(this, outer_rect);\r\n\r\n        return !(\r\n            (this.y + this.h < outer_rect.y) ||\r\n            (this.y > outer_rect.y + outer_rect.h) ||\r\n            (this.x > outer_rect.x + outer_rect.w) ||\r\n            (this.x + this.w < outer_rect.x))\r\n    }\r\n}\r\n\r\n/**\r\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html\r\n * @type {[type]}\r\n */\r\nexport function extend<T, U>(first: T, second: U): T & U {\r\n    let result = <T & U>{};\r\n    for (let id in first) {\r\n        (<any>result)[id] = (<any>first)[id];\r\n    }\r\n    for (let id in second) {\r\n        if (!result.hasOwnProperty(id)) {\r\n            (<any>result)[id] = (<any>second)[id];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/** basic sleep function to be used for async functions */\r\nexport function sleep(ms = 0) {\r\n    return new Promise(r => setTimeout(r, ms));\r\n}\r\n\r\n\r\nexport function SortArray(values: any[]) {\r\n    return values.sort((a, b) => {\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n\r\n        if (a > b) {\r\n            return 1;\r\n        }\r\n\r\n        return 0\r\n    });\r\n}\r\n\r\nexport function CircleCollision(obj1: Vector2, obj2: Vector2, rad1: number, rad2: number): boolean {\r\n    let hit = false;\r\n\r\n    // Get distance with Pythagoras\r\n    let squaredist = (obj1.x * obj2.x) + (obj1.y * obj2.y);\r\n    hit = squaredist <= (rad1 + rad2) * (rad1 + rad2);\r\n\r\n    return hit;\r\n}\r\n","import { IGameOptions } from './game'\r\nimport { Logger } from './logger'\r\n\r\nexport class WindowManager {\r\n    private static _instance: WindowManager = null;\r\n\r\n    private _options: IGameOptions;\r\n    private _logger: Logger;\r\n\r\n    public canvas: HTMLCanvasElement;\r\n\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public canvasElementId: string;\r\n\r\n    public canvasWidth: number;\r\n\r\n    public canvasHeight: number;\r\n\r\n    constructor(options?: IGameOptions) {\r\n        if (WindowManager._instance) {\r\n            throw new Error('Logger is a singleton');\r\n        }\r\n        this._options = options;\r\n        this._logger = Logger.getInstance();\r\n        this._initialize();\r\n        WindowManager._instance = this;\r\n\r\n        return WindowManager._instance;\r\n    }\r\n\r\n    public static getInstance(): WindowManager {\r\n        if (WindowManager._instance == null) {\r\n\r\n            WindowManager._instance = new WindowManager();\r\n        }\r\n        return WindowManager._instance;\r\n    }\r\n\r\n    private _initialize() {\r\n        this.canvasElementId = this._options.canvasElementId;\r\n\r\n        if (this._options.canvasElementId) {\r\n            this._logger.debug('Using Canvas element specified: ' + this._options.canvasElementId);\r\n            this.canvas = <HTMLCanvasElement>document.getElementById(this._options.canvasElementId);\r\n        } else {\r\n            this._logger.debug('Using generated canvas element');\r\n            this.canvas = <HTMLCanvasElement>document.createElement('canvas');\r\n        }\r\n\r\n        if (this._options.width && this._options.height) {\r\n            this._logger.debug('Engine viewport is size ' + this._options.width + ' x ' + this._options.height);\r\n            this.canvasWidth = this._options.width;\r\n            this.canvasHeight = this._options.height;\r\n\r\n            this.canvas.width = this.canvasWidth;\r\n            this.canvas.height = this.canvasHeight;\r\n        }\r\n\r\n        this.ctx = <CanvasRenderingContext2D>this.canvas.getContext('2d');\r\n        if (!this.canvasElementId) {\r\n            document.body.appendChild(this.canvas);\r\n        }\r\n\r\n        this.ctx.mozImageSmoothingEnabled = false;\r\n        this.ctx.webkitImageSmoothingEnabled = false;\r\n        // this.ctx.msImageSmoothingEnabled = false;\r\n        this.ctx.imageSmoothingEnabled = false;\r\n\r\n        window.addEventListener('resize', () => {\r\n            this._onResize();\r\n        }, false);\r\n\r\n        this._onResize();\r\n    }\r\n\r\n    private _onResize() {\r\n        if ((window.innerWidth / window.innerHeight) < 1.4)\r\n            return;\r\n\r\n        var height = window.innerHeight;\r\n\r\n        var ratio = this.canvas.width / this.canvas.height;\r\n        var width = height * ratio;\r\n\r\n        document.getElementById(\"canvas-game\").style.width = width + 'px';\r\n        document.getElementById(\"canvas-game\").style.height = height + 'px';\r\n    }\r\n\r\n}","import { Game } from './engine/game'\r\n\r\nconsole.log('Welcome to Bakudan Boy!');\r\n\r\nvar myGame = new Game({\r\n    width: 336,\r\n    height: 240,\r\n    canvasElementId: 'canvas-game',\r\n    spriteSheetUrl: [\r\n        '/assets/image/bakudanboy.png',\r\n        '/assets/image/blocks.png',\r\n        '/assets/image/enemy.png',\r\n    ],\r\n    timeScale: 1,\r\n});\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJzcmMvZW5naW5lL2VudGl0aWVzL2JvbWItbWFuYWdlci50cyIsInNyYy9lbmdpbmUvZW50aXRpZXMvZW50aXR5LnRzIiwic3JjL2VuZ2luZS9lbnRpdGllcy9tYXAudHMiLCJzcmMvZW5naW5lL2VudGl0aWVzL21vbnN0ZXItbWFuYWdlci50cyIsInNyYy9lbmdpbmUvZW50aXRpZXMvcGxheWVyLnRzIiwic3JjL2VuZ2luZS9nYW1lLnRzIiwic3JjL2VuZ2luZS9pbnB1dC50cyIsInNyYy9lbmdpbmUvbG9nZ2VyLnRzIiwic3JjL2VuZ2luZS9zcHJpdGVzaGVldC50cyIsInNyYy9lbmdpbmUvc3RhdGVzL2luZGV4LnRzIiwic3JjL2VuZ2luZS9zdGF0ZXMvbWFpbmdhbWUudHMiLCJzcmMvZW5naW5lL3N0YXRlcy9zdGF0ZS50cyIsInNyYy9lbmdpbmUvc3RhdGVzL3RpdGxlc2NyZWVuLnRzIiwic3JjL2VuZ2luZS91dGlsLnRzIiwic3JjL2VuZ2luZS93aW5kb3ctbWFuYWdlci50cyIsInNyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7O0FDQUE7O0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7O0FDRkE7O0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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LEdBQThCLEFBQUMsQUFBQyxBQUFDLElBQUMsQUFBQztBQUNyQyxBQUFLLDRCQUFHLEFBQUssTUFBQyxBQUFLLEFBQUMsQUFDeEI7QUFBQyxBQUNELEFBQUksMkJBQ0MsQUFBRyxNQUFHLEFBQUMsS0FBSSxBQUFHLE9BQUksQUFBQyxBQUFDLEFBQ2xCLENBREgsSUFDSSxBQUFHLE1BQUcsQUFBQyxLQUFJLEFBQUcsQUFBSSxPQUFDLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxBQUFDLEFBQ2hELEtBQUMsQUFBRyxNQUFHLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBSyxTQUFJLEFBQUcsQUFBRyxNQUFDLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBSyxRQUFHLEFBQUMsQUFBQyxLQUFJLEFBQUcsT0FBSSxBQUFDLEFBQUMsQUFDOUUsS0FBQyxBQUFHLE1BQUcsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFLLFNBQUksQUFBRyxBQUFHLE1BQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFLLFFBQUcsQUFBQyxBQUFDLEtBQUksQUFBRyxBQUFJLE9BQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFNLFNBQUcsQUFBQyxBQUFDLEFBQUMsQUFFekcsS0FBQyxBQUFHLE9BQUksQUFBQyxLQUFJLEFBQUcsTUFBRyxBQUFDLEFBQUMsQUFDckIsS0FBQyxBQUFHLEFBQUksT0FBQyxBQUFJLEtBQUMsQUFBVSxXQUFDLEFBQUssUUFBRyxBQUFDLEFBQUMsS0FBSSxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQy9DLEtBQUMsQUFBRyxPQUFJLEFBQUMsQUFBSSxLQUFDLEFBQUcsQUFBRyxNQUFDLEFBQUksS0FBQyxBQUFVLFdBQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxLQUFJLEFBQUcsTUFBRyxBQUFJLEtBQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ2xGLFVBQUMsQUFBRyxBQUFJLE9BQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFLLFFBQUcsQUFBQyxBQUFDLEtBQUksQUFBRyxBQUFHLE1B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QUM7QUF0RkQsQUFzRkM7QUFyRmtCLGNBQVMsWUFBa0IsQUFBSSxBQUFDO0FBRHRDLHdCQUFhOzs7Ozs7QUNIMUIscUJBQW9DO0FBRXBDLEFBQU8sUUFBQyxBQUFHLElBQUMsQUFBeUIsQUFBQyxBQUFDO0FBRXZDLElBQUksQUFBTSxhQUFPLE9BQUk7QUFDakIsQUFBSyxXQUFFLEFBQUc7QUFDVixBQUFNLFlBQUUsQUFBRztBQUNYLEFBQWUscUJBQUUsQUFBYTtBQUM5QixBQUFjLG9CQUFFLENBQ1osQUFBOEIsZ0NBQzlCLEFBQTBCLDRCQUMxQixBQUF5QixBQUM1QjtBQUNELEFBQVMsZUFBRSxBQUFDLEFBQ2YsQUFBQyxBQUFDO0FBVm1CLENBQVQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpe1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59OyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTsiLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTsiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07IiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59OyIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpOyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV1cbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcbiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYoSVNfUFJPVE8pe1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwidmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBjYWxsICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGdldEl0ZXJGbiAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKVxuICAsIEJSRUFLICAgICAgID0ge31cbiAgLCBSRVRVUk4gICAgICA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1Ipe1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpXG4gICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSlcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLICA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59OyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsiLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pOyIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTsiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTsiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTsiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaChlKXtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07IiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlOyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBPYnNlcnZlciAgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlclxuICAsIHByb2Nlc3MgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgUHJvbWlzZSAgID0gZ2xvYmFsLlByb21pc2VcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbigpe1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUoaGVhZCl7XG4gICAgICBmbiAgID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgaWYoaGVhZClub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZihpc05vZGUpe1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgfSBlbHNlIGlmKE9ic2VydmVyKXtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZVxuICAgICAgLCBub2RlICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKXtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihmbil7XG4gICAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWR9O1xuICAgIGlmKGxhc3QpbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZighaGVhZCl7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59OyIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07IiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTsiLCJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07IiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59OyIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYyl7XG4gICAgaWYoc2FmZSAmJiB0YXJnZXRba2V5XSl0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpOyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IHR5cGVvZiBjb3JlW0tFWV0gPT0gJ2Z1bmN0aW9uJyA/IGNvcmVbS0VZXSA6IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTsiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07IiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59OyIsInZhciBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGludm9rZSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgaHRtbCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpXG4gICwgY2VsICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGVcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpe1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spe1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDtcbiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0Jykpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59OyIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTsiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59OyIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTsiLCJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTsiLCJ2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTsiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jylcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTsiLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge3NldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXR9KTsiLCIiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNsYXNzb2YgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpe1xuICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjtcbn07XG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQylcbiAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7XG4gICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCAgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xudmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHtlcnJvcjogZX07XG4gIH1cbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3Qpe1xuICBpZihwcm9taXNlLl9uKXJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDFcbiAgICAgICwgaSAgICAgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsXG4gICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmVcbiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0XG4gICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpblxuICAgICAgICAsIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmKGhhbmRsZXIpe1xuICAgICAgICAgIGlmKCFvayl7XG4gICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7XG4gICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtcbiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fY1xuICAgICwgaSAgICAgPSAwXG4gICAgLCByZWFjdGlvbjtcbiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZihpc05vZGUpe1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXtcbiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIVVTRV9OQVRJVkUpe1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlXG4gICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgJCRyZXNvbHZlKHgpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pOyIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn0iLCJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eSdcclxuaW1wb3J0IHsgTWFwVGlsZSwgQmxvY2sgfSBmcm9tICcuL21hcCdcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJ1xyXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXHJcbmltcG9ydCB7IFNwcml0ZVNoZWV0IH0gZnJvbSAnLi4vc3ByaXRlc2hlZXQnXHJcbmltcG9ydCB7IE1vbnN0ZXJNYW5hZ2VyLCBNb25zdGVyIH0gZnJvbSAnLi9tb25zdGVyLW1hbmFnZXInXHJcblxyXG5jb25zdCBfQk9NQl9USU1FX09VVDogbnVtYmVyID0gMTIwMDtcclxuXHJcbmVudW0gQk9NQl9TVEFURVMge1xyXG5cdElETEUsXHJcblx0RVhQTE9ESU5HLFxyXG5cdENMRUFOX1VQXHJcbn1cclxuXHJcbmVudW0gRElSRUNUSU9OIHtcclxuXHRVUCA9IDAsXHJcblx0RE9XTixcclxuXHRMRUZULFxyXG5cdFJJR0hULFxyXG5cdENPVU5UXHJcbn1cclxuXHJcbmNsYXNzIEJvbWJFeHBsb3Npb24ge1xyXG5cdHByaXZhdGUgX2ZpcmVDcm9zc0FuaW06IHN0cmluZ1tdID0gW1xyXG5cdFx0J2ZpcmVfY3Jvc3NfMS5wbmcnLFxyXG5cdFx0J2ZpcmVfY3Jvc3NfMi5wbmcnLFxyXG5cdFx0J2ZpcmVfY3Jvc3NfMy5wbmcnLFxyXG5cdFx0J2ZpcmVfY3Jvc3NfNC5wbmcnLFxyXG5cdFx0J2ZpcmVfY3Jvc3NfNS5wbmcnXHJcblx0XTtcclxuXHJcblx0cHJpdmF0ZSBfZmlyZURvd25BbmltOiBzdHJpbmdbXSA9IFtcclxuXHRcdCdmaXJlX2Rvd25fMS5wbmcnLFxyXG5cdFx0J2ZpcmVfZG93bl8yLnBuZycsXHJcblx0XHQnZmlyZV9kb3duXzMucG5nJyxcclxuXHRcdCdmaXJlX2Rvd25fNC5wbmcnLFxyXG5cdFx0J2ZpcmVfZG93bl81LnBuZydcclxuXHRdO1xyXG5cclxuXHRwcml2YXRlIF9maXJlVXBBbmltOiBzdHJpbmdbXSA9IFtcclxuXHRcdCdmaXJlX3VwXzEucG5nJyxcclxuXHRcdCdmaXJlX3VwXzIucG5nJyxcclxuXHRcdCdmaXJlX3VwXzMucG5nJyxcclxuXHRcdCdmaXJlX3VwXzQucG5nJyxcclxuXHRcdCdmaXJlX3VwXzUucG5nJ1xyXG5cdF07XHJcblxyXG5cdHByaXZhdGUgX2ZpcmVMZWZ0QW5pbTogc3RyaW5nW10gPSBbXHJcblx0XHQnZmlyZV9sZWZ0XzEucG5nJyxcclxuXHRcdCdmaXJlX2xlZnRfMi5wbmcnLFxyXG5cdFx0J2ZpcmVfbGVmdF8zLnBuZycsXHJcblx0XHQnZmlyZV9sZWZ0XzQucG5nJyxcclxuXHRcdCdmaXJlX2xlZnRfNS5wbmcnXHJcblx0XTtcclxuXHJcblx0cHJpdmF0ZSBfZmlyZVJpZ2h0QW5pbTogc3RyaW5nW10gPSBbXHJcblx0XHQnZmlyZV9yaWdodF8xLnBuZycsXHJcblx0XHQnZmlyZV9yaWdodF8yLnBuZycsXHJcblx0XHQnZmlyZV9yaWdodF8zLnBuZycsXHJcblx0XHQnZmlyZV9yaWdodF80LnBuZycsXHJcblx0XHQnZmlyZV9yaWdodF81LnBuZydcclxuXHRdO1xyXG5cclxuXHRwcml2YXRlIF9maXJlRXh0VmVydGljYWxBbmltOiBzdHJpbmdbXSA9IFtcclxuXHRcdCdmaXJlX2V4dF91ZF8xLnBuZycsXHJcblx0XHQnZmlyZV9leHRfdWRfMi5wbmcnLFxyXG5cdFx0J2ZpcmVfZXh0X3VkXzMucG5nJyxcclxuXHRcdCdmaXJlX2V4dF91ZF80LnBuZycsXHJcblx0XHQnZmlyZV9leHRfdWRfNS5wbmcnXHJcblx0XTtcclxuXHJcblx0cHJpdmF0ZSBfZmlyZUV4dEhvcml6b250YWxBbmltOiBzdHJpbmdbXSA9IFtcclxuXHRcdCdmaXJlX2V4dF9scl8xLnBuZycsXHJcblx0XHQnZmlyZV9leHRfbHJfMi5wbmcnLFxyXG5cdFx0J2ZpcmVfZXh0X2xyXzMucG5nJyxcclxuXHRcdCdmaXJlX2V4dF9scl80LnBuZycsXHJcblx0XHQnZmlyZV9leHRfbHJfNS5wbmcnXHJcblx0XTtcclxuXHJcblx0cHJpdmF0ZSBfYm9tYkxlbmd0aDogbnVtYmVyID0gMTtcclxuXHRwcml2YXRlIF9jdXJyZW50VGljazogbnVtYmVyID0gMDtcclxuXHRwcml2YXRlIF9hbmltU3BlZWQ6IG51bWJlciA9IDkwO1xyXG5cdHByaXZhdGUgX2N1cnJlbnRBbmltSWR4OiBudW1iZXIgPSAwO1xyXG5cclxuXHRwdWJsaWMgb25BbmltRW5kOiAoKSA9PiB2b2lkO1xyXG5cclxuXHRwcml2YXRlIHRpbGVYOiBudW1iZXIgPSAtMTtcclxuXHRwcml2YXRlIHRpbGVZOiBudW1iZXIgPSAtMTtcclxuXHJcblx0cHJpdmF0ZSBzY3JlZW5YOiBudW1iZXIgPSAtMTtcclxuXHRwcml2YXRlIHNjcmVlblk6IG51bWJlciA9IC0xO1xyXG5cclxuXHRwcml2YXRlIF9pc0RvbmU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRwcml2YXRlIF9pc1JldmVyc2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0cHJpdmF0ZSBfU3ByaXRlU2hlZXQ6IFNwcml0ZVNoZWV0ID0gU3ByaXRlU2hlZXQuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0cHJpdmF0ZSBfQm9tYkV4cGxvc2lvbkxlbmd0aEFycjogbnVtYmVyW10gPSBbXHJcblx0XHQxLCAvL3RvcFxyXG5cdFx0MSwgLy9sZWZ0XHJcblx0XHQxLCAvL3JpZ2h0XHJcblx0XHQxICAvL2Rvd25cclxuXHRdO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihfdGlsZVg6IG51bWJlciwgX3RpbGVZOiBudW1iZXIsIF9ib21iTGVuZ3RoOiBudW1iZXIpIHtcclxuXHRcdHRoaXMudGlsZVggPSBfdGlsZVg7XHJcblx0XHR0aGlzLnRpbGVZID0gX3RpbGVZO1xyXG5cclxuXHRcdHZhciB2ZWMyID0gTWFwVGlsZS5nZXRJbnN0YW5jZSgpLmdldFRpbGVTY3JlZW5Qb3NpdGlvbihfdGlsZVgsIF90aWxlWSk7XHJcblx0XHR0aGlzLnNjcmVlblggPSB2ZWMyLng7XHJcblx0XHR0aGlzLnNjcmVlblkgPSB2ZWMyLnk7XHJcblxyXG5cdFx0dGhpcy5fYm9tYkxlbmd0aCA9IF9ib21iTGVuZ3RoO1xyXG5cclxuXHRcdHRoaXMuX0JvbWJFeHBsb3Npb25MZW5ndGhBcnIgPSB0aGlzLl9DaGVja0V4cGxvc2lvbkJvdW5kcygpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHVwZGF0ZSgpIHtcclxuXHRcdGlmICghdGhpcy5faXNEb25lKSB7XHJcblx0XHRcdHZhciB0aW1lID0gRGF0ZS5ub3coKTtcclxuXHRcdFx0aWYgKCh0aW1lIC0gdGhpcy5fY3VycmVudFRpY2spID4gdGhpcy5fYW5pbVNwZWVkKSB7XHJcblx0XHRcdFx0dGhpcy5fY3VycmVudFRpY2sgPSB0aW1lO1xyXG5cdFx0XHRcdGlmICh0aGlzLl9pc1JldmVyc2UpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2N1cnJlbnRBbmltSWR4LS07XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2N1cnJlbnRBbmltSWR4IDwgMCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLm9uQW5pbUVuZCgpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9pc0RvbmUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMuX2N1cnJlbnRBbmltSWR4Kys7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2N1cnJlbnRBbmltSWR4ID49IHRoaXMuX2ZpcmVDcm9zc0FuaW0ubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuX2N1cnJlbnRBbmltSWR4ID0gdGhpcy5fZmlyZUNyb3NzQW5pbS5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9pc1JldmVyc2UgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fQ2hlY2tCb21iSGl0KCk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBfQ2hlY2tCb21iSGl0KCl7XHJcblx0XHR2YXIgbW9uc3RlcnMgPSBNb25zdGVyTWFuYWdlci5nZXRJbnN0YW5jZSgpLkdldE1vbnN0ZXJzKCk7XHJcblx0XHR2YXIgcGxheWVyID0gTW9uc3Rlck1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5HZXRQbGF5ZXJzKCk7XHJcblxyXG5cdFx0Ly8gaG9yaXpvbnRhbFxyXG5cdFx0e1xyXG5cdFx0XHRsZXQgbGVmdENudCA9IHRoaXMuX0JvbWJFeHBsb3Npb25MZW5ndGhBcnJbRElSRUNUSU9OLkxFRlRdO1xyXG5cdFx0XHRsZXQgcmlnaHRDbnQgPSB0aGlzLl9Cb21iRXhwbG9zaW9uTGVuZ3RoQXJyW0RJUkVDVElPTi5SSUdIVF07XHJcblx0XHRcdGxldCBsZWZ0WCA9IChsZWZ0Q250ICogMTYgKiAtMSk7XHJcblx0XHRcdGxldCByaWdodFggPSAocmlnaHRDbnQgKiAxNik7XHJcblxyXG5cdFx0XHRsZXQgdGlsZVJlY3QgPSBuZXcgVXRpbC5jUmVjdGFuZ2xlKGxlZnRYICsgdGhpcy5zY3JlZW5YLHRoaXMuc2NyZWVuWSxyaWdodFggKyBNYXRoLmFicyhsZWZ0WCkgKyAxNiwxNik7XHJcblxyXG5cdFx0XHQvL0NoZWNrIGZvciBIaXRzXHJcblx0XHRcdG1vbnN0ZXJzLmZvckVhY2goKG1vbnN0ZXIpID0+IHtcclxuXHRcdFx0XHRpZiAoIW1vbnN0ZXIuaXNIaXQpIHtcclxuXHRcdFx0XHRcdGlmIChtb25zdGVyLkdldEhpdEJvdW5kcygpLndpdGhpbih0aWxlUmVjdCkpXHJcblx0XHRcdFx0XHRcdG1vbnN0ZXIuRGllKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdGlmKHBsYXllci5HZXRIaXRCb3VuZHMoKS53aXRoaW4odGlsZVJlY3QpKXtcclxuXHRcdFx0XHRwbGF5ZXIuRGllKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyB2ZXJ0aWNhbHNhZGFcclxuXHRcdHtcclxuXHRcdFx0bGV0IHVwQ250ID0gdGhpcy5fQm9tYkV4cGxvc2lvbkxlbmd0aEFycltESVJFQ1RJT04uVVBdO1xyXG5cdFx0XHRsZXQgZG93bkNudCA9IHRoaXMuX0JvbWJFeHBsb3Npb25MZW5ndGhBcnJbRElSRUNUSU9OLkRPV05dO1xyXG5cdFx0XHRsZXQgdXBYID0gKGxlZnRDbnQgKiAxNiAqIC0xKTtcclxuXHRcdFx0bGV0IGRvd25YID0gKGRvd25DbnQgKiAxNik7XHJcblxyXG5cdFx0XHRsZXQgdGlsZVJlY3QgPSBuZXcgVXRpbC5jUmVjdGFuZ2xlKHRoaXMuc2NyZWVuWCx1cFggKyB0aGlzLnNjcmVlblksMTYsZG93blggKyBNYXRoLmFicyh1cFgpICsgMTYpO1xyXG5cclxuXHRcdFx0Ly9DaGVjayBmb3IgSGl0c1xyXG5cdFx0XHRtb25zdGVycy5mb3JFYWNoKChtb25zdGVyKSA9PiB7XHJcblx0XHRcdFx0aWYgKCFtb25zdGVyLmlzSGl0KSB7XHJcblx0XHRcdFx0XHRpZiAobW9uc3Rlci5HZXRIaXRCb3VuZHMoKS53aXRoaW4odGlsZVJlY3QpKVxyXG5cdFx0XHRcdFx0XHRtb25zdGVyLkRpZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZihwbGF5ZXIuR2V0SGl0Qm91bmRzKCkud2l0aGluKHRpbGVSZWN0KSl7XHJcblx0XHRcdFx0cGxheWVyLkRpZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIERyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuXHRcdGlmICh0aGlzLl9pc0RvbmUpIHJldHVybjtcclxuXHJcblx0XHRjdHguc2F2ZSgpO1xyXG5cdFx0Y3R4LnRyYW5zbGF0ZSh0aGlzLnNjcmVlblgsIHRoaXMuc2NyZWVuWSk7XHJcblx0XHQvL2RyYXcgY2VudGVyXHJcblx0XHR0aGlzLl9TcHJpdGVTaGVldC5EcmF3KDAsIDAsIDEsIHRoaXMuX2ZpcmVDcm9zc0FuaW1bdGhpcy5fY3VycmVudEFuaW1JZHhdLCBjdHgpO1xyXG5cdFx0Ly92ZXJ0aWNhbFxyXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5fQm9tYkV4cGxvc2lvbkxlbmd0aEFycltESVJFQ1RJT04uVVBdOyBpKyspIHtcclxuXHRcdFx0aWYgKGkgPT09ICh0aGlzLl9ib21iTGVuZ3RoKSlcclxuXHRcdFx0XHR0aGlzLl9TcHJpdGVTaGVldC5EcmF3KDAsIC0xNiAqIGksIDEsIHRoaXMuX2ZpcmVVcEFuaW1bdGhpcy5fY3VycmVudEFuaW1JZHhdLCBjdHgpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhpcy5fU3ByaXRlU2hlZXQuRHJhdygwLCAtMTYgKiBpLCAxLCB0aGlzLl9maXJlRXh0VmVydGljYWxBbmltW3RoaXMuX2N1cnJlbnRBbmltSWR4XSwgY3R4KTtcclxuXHRcdH1cclxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuX0JvbWJFeHBsb3Npb25MZW5ndGhBcnJbRElSRUNUSU9OLkRPV05dOyBpKyspIHtcclxuXHRcdFx0aWYgKGkgPT09ICh0aGlzLl9ib21iTGVuZ3RoKSlcclxuXHRcdFx0XHR0aGlzLl9TcHJpdGVTaGVldC5EcmF3KDAsIDE2ICogaSwgMSwgdGhpcy5fZmlyZURvd25BbmltW3RoaXMuX2N1cnJlbnRBbmltSWR4XSwgY3R4KTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRoaXMuX1Nwcml0ZVNoZWV0LkRyYXcoMCwgMTYgKiBpLCAxLCB0aGlzLl9maXJlRXh0VmVydGljYWxBbmltW3RoaXMuX2N1cnJlbnRBbmltSWR4XSwgY3R4KTtcclxuXHRcdH1cclxuXHJcblx0XHQvL2hvcml6b250YWxcclxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuX0JvbWJFeHBsb3Npb25MZW5ndGhBcnJbRElSRUNUSU9OLlJJR0hUXTsgaSsrKSB7XHJcblx0XHRcdGlmIChpID09PSAodGhpcy5fYm9tYkxlbmd0aCkpXHJcblx0XHRcdFx0dGhpcy5fU3ByaXRlU2hlZXQuRHJhdygxNiAqIGksIDAsIDEsIHRoaXMuX2ZpcmVSaWdodEFuaW1bdGhpcy5fY3VycmVudEFuaW1JZHhdLCBjdHgpO1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0dGhpcy5fU3ByaXRlU2hlZXQuRHJhdygxNiAqIGksIDAsIDEsIHRoaXMuX2ZpcmVFeHRIb3Jpem9udGFsQW5pbVt0aGlzLl9jdXJyZW50QW5pbUlkeF0sIGN0eCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5fQm9tYkV4cGxvc2lvbkxlbmd0aEFycltESVJFQ1RJT04uTEVGVF07IGkrKykge1xyXG5cdFx0XHRpZiAoaSA9PT0gKHRoaXMuX2JvbWJMZW5ndGgpKVxyXG5cdFx0XHRcdHRoaXMuX1Nwcml0ZVNoZWV0LkRyYXcoLTE2ICogaSwgMCwgMSwgdGhpcy5fZmlyZUxlZnRBbmltW3RoaXMuX2N1cnJlbnRBbmltSWR4XSwgY3R4KTtcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRoaXMuX1Nwcml0ZVNoZWV0LkRyYXcoLTE2ICogaSwgMCwgMSwgdGhpcy5fZmlyZUV4dEhvcml6b250YWxBbmltW3RoaXMuX2N1cnJlbnRBbmltSWR4XSwgY3R4KTtcclxuXHRcdH1cclxuXHJcblx0XHRjdHgucmVzdG9yZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGlzRW5kKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2lzRG9uZTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX0NoZWNrRXhwbG9zaW9uQm91bmRzKCk6IG51bWJlcltdIHtcclxuXHRcdGxldCBib3VuZGFycmF5ID0gWzAsIDAsIDAsIDBdO1xyXG5cclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JvbWJMZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgb2Zmc2V0ID0gLSAxIC0gaTtcclxuXHRcdFx0bGV0IGJsb2NrID0gTWFwVGlsZS5nZXRJbnN0YW5jZSgpLmdldFRpbGUodGhpcy50aWxlWCwgdGhpcy50aWxlWSArIG9mZnNldCk7XHJcblx0XHRcdGlmIChibG9jayAhPSBCbG9jay5HUk9VTkQpIHtcclxuXHRcdFx0XHRpZiAoYmxvY2sgPT0gQmxvY2suQlJFQUtCTE9DSykge1xyXG5cdFx0XHRcdFx0TWFwVGlsZS5nZXRJbnN0YW5jZSgpLkRlc3Ryb3lUaWxlKHRoaXMudGlsZVgsIHRoaXMudGlsZVkgKyBvZmZzZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ym91bmRhcnJheVtESVJFQ1RJT04uVVBdKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ib21iTGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IG9mZnNldCA9IDEgKyBpO1xyXG5cdFx0XHRsZXQgYmxvY2sgPSBNYXBUaWxlLmdldEluc3RhbmNlKCkuZ2V0VGlsZSh0aGlzLnRpbGVYLCB0aGlzLnRpbGVZICsgb2Zmc2V0KTtcclxuXHRcdFx0aWYgKGJsb2NrICE9IEJsb2NrLkdST1VORCkge1xyXG5cdFx0XHRcdGlmIChibG9jayA9PSBCbG9jay5CUkVBS0JMT0NLKSB7XHJcblx0XHRcdFx0XHRNYXBUaWxlLmdldEluc3RhbmNlKCkuRGVzdHJveVRpbGUodGhpcy50aWxlWCwgdGhpcy50aWxlWSArIG9mZnNldCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ym91bmRhcnJheVtESVJFQ1RJT04uRE9XTl0rKztcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JvbWJMZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgb2Zmc2V0ID0gLSAxIC0gaTtcclxuXHRcdFx0bGV0IGJsb2NrID0gTWFwVGlsZS5nZXRJbnN0YW5jZSgpLmdldFRpbGUodGhpcy50aWxlWCArIG9mZnNldCwgdGhpcy50aWxlWSk7XHJcblx0XHRcdGlmIChibG9jayAhPSBCbG9jay5HUk9VTkQpIHtcclxuXHRcdFx0XHRpZiAoYmxvY2sgPT0gQmxvY2suQlJFQUtCTE9DSykge1xyXG5cdFx0XHRcdFx0TWFwVGlsZS5nZXRJbnN0YW5jZSgpLkRlc3Ryb3lUaWxlKHRoaXMudGlsZVggKyBvZmZzZXQsIHRoaXMudGlsZVkpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJvdW5kYXJyYXlbRElSRUNUSU9OLkxFRlRdKys7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9ib21iTGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IG9mZnNldCA9IDEgKyBpO1xyXG5cdFx0XHRsZXQgYmxvY2sgPSBNYXBUaWxlLmdldEluc3RhbmNlKCkuZ2V0VGlsZSh0aGlzLnRpbGVYICsgb2Zmc2V0LCB0aGlzLnRpbGVZKTtcclxuXHRcdFx0aWYgKGJsb2NrICE9IEJsb2NrLkdST1VORCkge1xyXG5cdFx0XHRcdGlmIChibG9jayA9PSBCbG9jay5CUkVBS0JMT0NLKSB7XHJcblx0XHRcdFx0XHRNYXBUaWxlLmdldEluc3RhbmNlKCkuRGVzdHJveVRpbGUodGhpcy50aWxlWCArIG9mZnNldCwgdGhpcy50aWxlWSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ym91bmRhcnJheVtESVJFQ1RJT04uUklHSFRdKys7XHJcblx0XHR9XHJcblxyXG5cdFx0TG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoYm91bmRhcnJheSk7XHJcblx0XHRyZXR1cm4gYm91bmRhcnJheTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBCb21iIGV4dGVuZHMgRW50aXR5IHtcclxuXHRwcml2YXRlIF9ib21iU3ByaXRlczogc3RyaW5nW10gPSBbXHJcblx0XHQnYm9tYl8xLnBuZycsXHJcblx0XHQnYm9tYl8yLnBuZycsXHJcblx0XHQnYm9tYl8zLnBuZycsXHJcblx0XHQnYm9tYl8yLnBuZycsXHJcblx0XTtcclxuXHRwdWJsaWMgY3VycmVudE1hcFBvc2l0aW9uOiBVdGlsLlZlY3RvcjI7XHJcblx0cHVibGljIHRvRGVsZXRlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cdHByaXZhdGUgX2JvbWJMZW5ndGg6IG51bWJlciA9IDI7XHJcblx0cHJpdmF0ZSBfY3VycmVudFRpY2s6IG51bWJlciA9IDA7XHJcblx0cHJpdmF0ZSBfYW5pbVNwZWVkOiBudW1iZXIgPSAzMjA7XHJcblx0cHJpdmF0ZSBfY3VycmVudEJvbWJJZGxlSWR4OiBudW1iZXIgPSAwO1xyXG5cclxuXHRwcml2YXRlIF9rYWJvb206IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0cHJpdmF0ZSBfYm9tYkFuaW1PYmo6IEJvbWJFeHBsb3Npb24gPSBudWxsO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihfdGlsZVg6IG51bWJlciwgX3RpbGVZOiBudW1iZXIpIHtcclxuXHRcdHN1cGVyKDAsIDAsICdib21iXzEucG5nJywgMSk7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50TWFwUG9zaXRpb24gPSBuZXcgVXRpbC5WZWN0b3IyKF90aWxlWCwgX3RpbGVZKTtcclxuXHJcblx0XHR2YXIgdmVjMiA9IE1hcFRpbGUuZ2V0SW5zdGFuY2UoKS5nZXRUaWxlU2NyZWVuUG9zaXRpb24oX3RpbGVYLCBfdGlsZVkpO1xyXG5cclxuXHRcdHRoaXMueCA9IHZlYzIueDtcclxuXHRcdHRoaXMueSA9IHZlYzIueTtcclxuXHJcblx0XHR0aGlzLnRvRGVsZXRlID0gZmFsc2U7XHJcblxyXG5cdFx0dGhpcy5fQm9tYlRpbWVyU3RhcnQoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBVcGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xyXG5cdFx0c3VwZXIuVXBkYXRlKGRlbHRhKTtcclxuXHRcdHRoaXMuX3RpY2soKTtcclxuXHJcblx0XHRpZiAodGhpcy5fYm9tYkFuaW1PYmogIT09IG51bGwpIHRoaXMuX2JvbWJBbmltT2JqLnVwZGF0ZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIERyYXcoZGVsdGE6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuXHRcdHN1cGVyLkRyYXcoZGVsdGEsIGN0eCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2JvbWJBbmltT2JqICE9PSBudWxsKSB0aGlzLl9ib21iQW5pbU9iai5EcmF3KGN0eCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF90aWNrKCk6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKHRoaXMuX2thYm9vbSlcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdHZhciB0aW1lID0gRGF0ZS5ub3coKTtcclxuXHRcdGlmICgodGltZSAtIHRoaXMuX2N1cnJlbnRUaWNrKSA+IHRoaXMuX2FuaW1TcGVlZCkge1xyXG5cdFx0XHR0aGlzLmltYWdlTmFtZSA9IHRoaXMuX2JvbWJTcHJpdGVzW3RoaXMuX2N1cnJlbnRCb21iSWRsZUlkeF07XHJcblx0XHRcdHRoaXMuX2N1cnJlbnRCb21iSWRsZUlkeCA9ICh0aGlzLl9jdXJyZW50Qm9tYklkbGVJZHggKyAxKSAlIHRoaXMuX2JvbWJTcHJpdGVzLmxlbmd0aDtcclxuXHRcdFx0dGhpcy5fY3VycmVudFRpY2sgPSB0aW1lO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0cHJpdmF0ZSBhc3luYyBfQm9tYlRpbWVyU3RhcnQoKSB7XHJcblx0XHRMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhcIkJPTUIgVElNRVIgU1RBUlRFRFwiKTtcclxuXHRcdGF3YWl0IFV0aWwuc2xlZXAoX0JPTUJfVElNRV9PVVQpO1xyXG5cdFx0TG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoXCJLQUJPT01cIik7XHJcblx0XHRhd2FpdCB0aGlzLl9wcm9jZXNzRXhwbG9zaW9uKCk7XHJcblx0XHRMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhcIkJPTUIgREVMRVRFXCIpO1xyXG5cdFx0dGhpcy50b0RlbGV0ZSA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIF9wcm9jZXNzRXhwbG9zaW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KChyLCBlKSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dGhpcy5fa2Fib29tID0gdHJ1ZTtcclxuXHRcdFx0XHR0aGlzLmltYWdlTmFtZSA9IFwiXCI7XHJcblx0XHRcdFx0dGhpcy5fY3VycmVudFRpY2sgPSAwO1xyXG5cdFx0XHRcdHRoaXMuX2JvbWJBbmltT2JqID0gbmV3IEJvbWJFeHBsb3Npb24odGhpcy5jdXJyZW50TWFwUG9zaXRpb24ueCwgdGhpcy5jdXJyZW50TWFwUG9zaXRpb24ueSwgdGhpcy5fYm9tYkxlbmd0aCk7XHJcblxyXG5cdFx0XHRcdHRoaXMuX2JvbWJBbmltT2JqLm9uQW5pbUVuZCA9ICgpID0+IHtcclxuXHRcdFx0XHRcdE1hcFRpbGUuZ2V0SW5zdGFuY2UoKS5Vbk1hcmtUaWxlQm9tYih0aGlzLngsdGhpcy55KTtcclxuXHRcdFx0XHRcdHIodHJ1ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoIChlcnIpIHtcclxuXHRcdFx0XHRMb2dnZXIuZ2V0SW5zdGFuY2UoKS5lcnJvcihlcnIubWVzc2FnZSk7XHJcblx0XHRcdFx0ZShmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvbWJNYW5hZ2VyIGV4dGVuZHMgRW50aXR5IHtcclxuXHRwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IEJvbWJNYW5hZ2VyID0gbnVsbDtcclxuXHRwcml2YXRlIF9ib21iczogQm9tYltdID0gW107XHJcblx0cHJpdmF0ZSBfTWFwVGlsZTogTWFwVGlsZSA9IE1hcFRpbGUuZ2V0SW5zdGFuY2UoKTtcclxuXHRwcml2YXRlIF9NYXhCb21iOiBudW1iZXIgPSAxO1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKDAsIDAsIFwiXCIsIDApO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBCb21iTWFuYWdlciB7XHJcblx0XHRpZiAoQm9tYk1hbmFnZXIuX2luc3RhbmNlID09IG51bGwpIHtcclxuXHJcblx0XHRcdEJvbWJNYW5hZ2VyLl9pbnN0YW5jZSA9IG5ldyBCb21iTWFuYWdlcigpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIEJvbWJNYW5hZ2VyLl9pbnN0YW5jZTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBTcGF3bkJvbWIocG9zWDogbnVtYmVyLCBwb3NZOiBudW1iZXIpOiBVdGlsLmNSZWN0YW5nbGUge1xyXG5cdFx0aWYgKHRoaXMuX2JvbWJzLmxlbmd0aCA+PSB0aGlzLl9NYXhCb21iKVxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHRsZXQgdmVjMiA9IHRoaXMuX01hcFRpbGUuZ2V0U2NyZWVuVG9UaWxlUG9zaXRpb24ocG9zWCwgcG9zWSk7XHJcblx0XHRsZXQgZm91bmQgPSBmYWxzZTtcclxuXHRcdC8vY2hlY2sgaWYgY3VycmVudCB0aWxlIGlzIHZhbGlkXHJcblx0XHRmb3IgKGxldCBib21iIG9mIHRoaXMuX2JvbWJzKSB7XHJcblx0XHRcdGlmIChib21iLmN1cnJlbnRNYXBQb3NpdGlvbi54ID09IHZlYzIueCAmJlxyXG5cdFx0XHRcdGJvbWIuY3VycmVudE1hcFBvc2l0aW9uLnkgPT0gdmVjMi55KVxyXG5cdFx0XHRcdGZvdW5kID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWZvdW5kKSB7XHJcblx0XHRcdHRoaXMuX2JvbWJzLnB1c2gobmV3IEJvbWIodmVjMi54LCB2ZWMyLnkpKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fTWFwVGlsZS5HZXRUaWxlQm91bmRzKHZlYzIueCx2ZWMyLnkpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIFVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHRzdXBlci5VcGRhdGUoZGVsdGEpO1xyXG5cclxuXHRcdHRoaXMuX2JvbWJzLmZvckVhY2goKGJvbWIsIGlkeCwgYm9tYnMpID0+IHtcclxuXHRcdFx0Ym9tYi5VcGRhdGUoZGVsdGEpO1xyXG5cclxuXHRcdFx0aWYgKGJvbWIudG9EZWxldGUpIHtcclxuXHRcdFx0XHRib21icy5zcGxpY2UoYm9tYnMuaW5kZXhPZihib21iKSwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHVibGljIERyYXcoZGVsdGE6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuXHRcdHN1cGVyLkRyYXcoZGVsdGEsIGN0eCk7XHJcblx0XHR0aGlzLl9ib21icy5mb3JFYWNoKChib21iKSA9PiB7XHJcblx0XHRcdGJvbWIuRHJhdyhkZWx0YSwgY3R4KTtcclxuXHRcdH0pO1xyXG5cdH1cclxufSIsImltcG9ydCB7IFNwcml0ZVNoZWV0IH0gZnJvbSAnLi4vc3ByaXRlc2hlZXQnXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcidcclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHkge1xyXG4gICAgcHVibGljIGlkOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpc1Zpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHVibGljIGltYWdlTmFtZTogc3RyaW5nID0gXCJcIjtcclxuICAgIHB1YmxpYyB0ZXh0dXJlSURYOiBudW1iZXI7XHJcblxyXG4gICAgcHJpdmF0ZSBfU3ByaXRlU2hlZXQ6IFNwcml0ZVNoZWV0ID0gU3ByaXRlU2hlZXQuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXg6IG51bWJlciwgcGFyYW15OiBudW1iZXIsIGltZzogc3RyaW5nLCB0ZXh0SUQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHBhcmFteDtcclxuICAgICAgICB0aGlzLnkgPSBwYXJhbXk7XHJcbiAgICAgICAgdGhpcy5pbWFnZU5hbWUgPSBpbWc7XHJcbiAgICAgICAgdGhpcy50ZXh0dXJlSURYID0gdGV4dElEO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEcmF3KGRlbHRhOiBudW1iZXIsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVmlzaWJsZSB8fCB0aGlzLmltYWdlTmFtZSA9PT0gXCJcIilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9TcHJpdGVTaGVldC5EcmF3KDAsMCx0aGlzLnRleHR1cmVJRFgsdGhpcy5pbWFnZU5hbWUsY3R4KTtcclxuICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZXJyb3IoXCJFcnJvciBkcmF3aW5nIFtcIiArIHRoaXMuaW1hZ2VOYW1lICtcIl0gOlwiICsgZS5tZXNzYWdlICwgdGhpcy5pbWFnZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8vIGltcG9ydCAgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eSdcclxuaW1wb3J0ICogYXMgVXRpbCBmcm9tICcuLi91dGlsJ1xyXG5pbXBvcnQgeyBTcHJpdGVTaGVldCB9IGZyb20gJy4uL3Nwcml0ZXNoZWV0J1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElNYXBUaWxlT3B0aW9uIHtcclxuICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICBoZWlnaHQ6IG51bWJlcixcclxuICAgIHRpbGVXaWR0aDogMTYsXHJcbiAgICB0aWxlSGVpZ2h0OiAxNixcclxuICAgIGJyZWFrQmxvY2tDaGFuY2U6IG51bWJlcixcclxuICAgIGJsb2NrSW1nOiBzdHJpbmcsXHJcbiAgICBncm91bmRJbWc6IHN0cmluZyxcclxuICAgIGdyb3VuZDJJbWc6IHN0cmluZyxcclxuICAgIGJyZWFrYWJsZUltZzogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEJsb2NrIHtcclxuICAgIEJMT0NLID0gMCxcclxuICAgIEdST1VORCxcclxuICAgIEdST1VORDIsXHJcbiAgICBCUkVBS0JMT0NLLFxyXG4gICAgR1JPVU5EQk9NQixcclxuICAgIEdST1VOREJPTUJfUEFTUyxcclxufVxyXG5cclxuY2xhc3MgQnJlYWtCbG9ja0FuaW0ge1xyXG4gICAgcHJpdmF0ZSBfQnJlYWtCbG9ja0FuaW06IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICdibG9ja19icmVha18xLnBuZycsXHJcbiAgICAgICAgJ2Jsb2NrX2JyZWFrXzIucG5nJyxcclxuICAgICAgICAnYmxvY2tfYnJlYWtfMy5wbmcnLFxyXG4gICAgICAgICdibG9ja19icmVha180LnBuZycsXHJcbiAgICAgICAgJ2Jsb2NrX2JyZWFrXzUucG5nJ1xyXG4gICAgXTtcclxuXHJcbiAgICBwcml2YXRlIF9jdXJyZW50VGljazogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX2FuaW1TcGVlZDogbnVtYmVyID0gMTUwO1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudEFuaW1JZHg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHVibGljIG9uQW5pbUVuZDogKCkgPT4gdm9pZDtcclxuXHJcbiAgICBwcml2YXRlIF9TcHJpdGVTaGVldDogU3ByaXRlU2hlZXQgPSBTcHJpdGVTaGVldC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIHByaXZhdGUgdGlsZVg6IG51bWJlciA9IC0xO1xyXG4gICAgcHJpdmF0ZSB0aWxlWTogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgcHJpdmF0ZSBzY3JlZW5YOiBudW1iZXIgPSAtMTtcclxuICAgIHByaXZhdGUgc2NyZWVuWTogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNEb25lOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoX3RpbGVYOiBudW1iZXIsIF90aWxlWTogbnVtYmVyLCBfb25BbmltRW5kOiAoKT0+dm9pZCkge1xyXG4gICAgICAgIHRoaXMudGlsZVggPSBfdGlsZVg7XHJcbiAgICAgICAgdGhpcy50aWxlWSA9IF90aWxlWTtcclxuXHJcbiAgICAgICAgdmFyIHZlYzIgPSBNYXBUaWxlLmdldEluc3RhbmNlKCkuZ2V0VGlsZVNjcmVlblBvc2l0aW9uKF90aWxlWCwgX3RpbGVZKTtcclxuICAgICAgICB0aGlzLnNjcmVlblggPSB2ZWMyLng7XHJcbiAgICAgICAgdGhpcy5zY3JlZW5ZID0gdmVjMi55O1xyXG5cclxuICAgICAgICB0aGlzLm9uQW5pbUVuZCA9IF9vbkFuaW1FbmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNEb25lKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciB0aW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBpZiAoKHRpbWUgLSB0aGlzLl9jdXJyZW50VGljaykgPiB0aGlzLl9hbmltU3BlZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFRpY2sgPSB0aW1lO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50QW5pbUlkeCsrO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEFuaW1JZHggPj0gdGhpcy5fQnJlYWtCbG9ja0FuaW0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQW5pbUVuZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzRG9uZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNEb25lIHx8IHRoaXMuX2N1cnJlbnRBbmltSWR4ID49IHRoaXMuX0JyZWFrQmxvY2tBbmltLmxlbmd0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy5zY3JlZW5YLCB0aGlzLnNjcmVlblkpO1xyXG4gICAgICAgIHRoaXMuX1Nwcml0ZVNoZWV0LkRyYXcoMCwwLCAxLCB0aGlzLl9CcmVha0Jsb2NrQW5pbVt0aGlzLl9jdXJyZW50QW5pbUlkeF0sIGN0eCk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1hcFRpbGUge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBNYXBUaWxlID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIF9kZWZhdWx0TWFwVGlsZU9wdGlvbjogSU1hcFRpbGVPcHRpb24gPSB7XHJcbiAgICAgICAgd2lkdGg6IDIxLFxyXG4gICAgICAgIGhlaWdodDogMTUsXHJcbiAgICAgICAgdGlsZVdpZHRoOiAxNixcclxuICAgICAgICB0aWxlSGVpZ2h0OiAxNixcclxuICAgICAgICBicmVha0Jsb2NrQ2hhbmNlOiAxMCxcclxuICAgICAgICBibG9ja0ltZzogJ2Jsb2Nrc18wMi5wbmcnLFxyXG4gICAgICAgIGdyb3VuZEltZzogJ2Jsb2Nrc18wNC5wbmcnLFxyXG4gICAgICAgIGdyb3VuZDJJbWc6ICdibG9ja3NfMDUucG5nJyxcclxuICAgICAgICBicmVha2FibGVJbWc6ICdibG9ja3NfMDMucG5nJ1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIF9tYXBPcHRpb246IElNYXBUaWxlT3B0aW9uO1xyXG5cclxuICAgIHByaXZhdGUgX21hcERhdGE6IEJsb2NrW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIF9TcHJpdGVTaGVldDogU3ByaXRlU2hlZXQ7XHJcblxyXG4gICAgcHJpdmF0ZSBfQmxvY2tTcHJpdGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgICBwcml2YXRlIF9sb2dnZXI6IExvZ2dlciA9IExvZ2dlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIHByaXZhdGUgX2Jsb2NrQW5pbTogQnJlYWtCbG9ja0FuaW1bXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1hcHRpbGVvcHRpb24/OiBJTWFwVGlsZU9wdGlvbikge1xyXG4gICAgICAgIGlmIChNYXBUaWxlLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvZ2dlciBpcyBhIHNpbmdsZXRvbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZShtYXB0aWxlb3B0aW9uKTtcclxuXHJcbiAgICAgICAgTWFwVGlsZS5faW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBNYXBUaWxlLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IE1hcFRpbGUge1xyXG4gICAgICAgIGlmIChNYXBUaWxlLl9pbnN0YW5jZSA9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICBNYXBUaWxlLl9pbnN0YW5jZSA9IG5ldyBNYXBUaWxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYXBUaWxlLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pbml0aWFsaXplKG1hcHRpbGVvcHRpb24/OiBJTWFwVGlsZU9wdGlvbikge1xyXG4gICAgICAgIHRoaXMuX21hcE9wdGlvbiA9IFV0aWwuZXh0ZW5kKHRoaXMuX2RlZmF1bHRNYXBUaWxlT3B0aW9uLCBtYXB0aWxlb3B0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5fQmxvY2tTcHJpdGVzID0gW1xyXG4gICAgICAgICAgICB0aGlzLl9tYXBPcHRpb24uYmxvY2tJbWcsXHJcbiAgICAgICAgICAgIHRoaXMuX21hcE9wdGlvbi5ncm91bmRJbWcsXHJcbiAgICAgICAgICAgIHRoaXMuX21hcE9wdGlvbi5ncm91bmQySW1nLFxyXG4gICAgICAgICAgICB0aGlzLl9tYXBPcHRpb24uYnJlYWthYmxlSW1nLFxyXG4gICAgICAgICAgICB0aGlzLl9tYXBPcHRpb24uZ3JvdW5kSW1nLFxyXG4gICAgICAgICAgICB0aGlzLl9tYXBPcHRpb24uZ3JvdW5kSW1nLFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHRoaXMuX21hcERhdGEubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5fU3ByaXRlU2hlZXQgPSBTcHJpdGVTaGVldC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgICB0aGlzLkdlbmVyYXRlTWFwKHRoaXMuX21hcE9wdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdlbmVyYXRlTWFwKG9wdGlvbjogSU1hcFRpbGVPcHRpb24pIHtcclxuICAgICAgICBsZXQgY291bnQgPSBvcHRpb24ud2lkdGggKiBvcHRpb24uaGVpZ2h0O1xyXG5cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNvdW50OyB4KyspIHtcclxuICAgICAgICAgICAgaWYgKHggPCB0aGlzLl9tYXBPcHRpb24ud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcERhdGEucHVzaChCbG9jay5CTE9DSyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHggJSB0aGlzLl9tYXBPcHRpb24ud2lkdGgpID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcERhdGEucHVzaChCbG9jay5CTE9DSyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHRoaXMuX21hcE9wdGlvbi53aWR0aCAtICh4ICUgdGhpcy5fbWFwT3B0aW9uLndpZHRoKSkgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwRGF0YS5wdXNoKEJsb2NrLkJMT0NLKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh4ID4gKHRoaXMuX21hcE9wdGlvbi53aWR0aCAqIChvcHRpb24uaGVpZ2h0IC0gMSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXBEYXRhLnB1c2goQmxvY2suQkxPQ0spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrID0gQmxvY2suQlJFQUtCTE9DSztcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY29sID0geCAlIHRoaXMuX21hcE9wdGlvbi53aWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCByb3cgPSBNYXRoLmZsb29yKHggLyBvcHRpb24ud2lkdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghKE1hdGguZmxvb3IoeCAvIHRoaXMuX21hcE9wdGlvbi53aWR0aCkgJSAyKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICEoKHggJSB0aGlzLl9tYXBPcHRpb24ud2lkdGgpICUgMikpIHtcclxuICAgICAgICAgICAgICAgICAgICBibG9jayA9IEJsb2NrLkJMT0NLO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKGNvbCA8IDQgJiYgcm93ID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGNvbCA8IDQgJiYgcm93ID09ICh0aGlzLl9tYXBPcHRpb24uaGVpZ2h0IC0gMikpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGNvbCA8IHRoaXMuX21hcE9wdGlvbi53aWR0aCAmJiBjb2wgPiAodGhpcy5fbWFwT3B0aW9uLndpZHRoIC0gNSkgJiYgcm93ID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGNvbCA8IHRoaXMuX21hcE9wdGlvbi53aWR0aCAmJiBjb2wgPiAodGhpcy5fbWFwT3B0aW9uLndpZHRoIC0gNSkgJiYgcm93ID09ICh0aGlzLl9tYXBPcHRpb24uaGVpZ2h0IC0gMikpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHx8IChjb2wgPT0gMSAmJiByb3cgPCAzKVxyXG4gICAgICAgICAgICAgICAgICAgIHx8IChjb2wgPT0gKHRoaXMuX21hcE9wdGlvbi53aWR0aCAtIDIpICYmIHJvdyA8IDMpXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGNvbCA9PSAxICYmIChyb3cgPiAodGhpcy5fbWFwT3B0aW9uLmhlaWdodCAtIDQpICYmIHJvdyA8IHRoaXMuX21hcE9wdGlvbi5oZWlnaHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIHx8IChjb2wgPT0gKHRoaXMuX21hcE9wdGlvbi53aWR0aCAtIDIpICYmIHJvdyA+ICh0aGlzLl9tYXBPcHRpb24uaGVpZ2h0IC0gNCkgJiYgcm93IDwgdGhpcy5fbWFwT3B0aW9uLmhlaWdodClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrID0gQmxvY2suR1JPVU5EO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZCA9ICgoTWF0aC5yYW5kb20oKSAqIDEwMCkgKyAxKSA+ICB0aGlzLl9tYXBPcHRpb24uYnJlYWtCbG9ja0NoYW5jZTtcclxuICAgICAgICAgICAgICAgICAgICBibG9jayA9IHJhbmQgPyBCbG9jay5HUk9VTkQgOiBCbG9jay5CUkVBS0JMT0NLO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcERhdGEucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEcmF3KGRlbHRhOiBudW1iZXIsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWFwRGF0YS5mb3JFYWNoKCh0aWxlX3ZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9EcmF3VGlsZShkZWx0YSwgY3R4LCB0aWxlX3ZhbHVlLCBpbmRleCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Jsb2NrQW5pbS5mb3JFYWNoKChibG9jayk9PntcclxuICAgICAgICAgICAgYmxvY2suRHJhdyhjdHgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9EcmF3VGlsZShkZWx0YTogbnVtYmVyLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgdGlsZV92YWx1ZTogbnVtYmVyLCBpbmRleDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuXHJcbiAgICAgICAgbGV0IGZyYW1lID0gdGhpcy5fU3ByaXRlU2hlZXQuZnJhbWVzW3RoaXMuX0Jsb2NrU3ByaXRlc1t0aWxlX3ZhbHVlXV07XHJcblxyXG4gICAgICAgIGxldCB4ID0gKGluZGV4ICUgdGhpcy5fbWFwT3B0aW9uLndpZHRoKSAqIGZyYW1lLnc7XHJcblxyXG4gICAgICAgIGxldCB5ID0gKGluZGV4ID4gMCkgPyAoTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuX21hcE9wdGlvbi53aWR0aCkgKiBmcmFtZS5oKSA6IDA7XHJcblxyXG4gICAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XHJcblxyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fU3ByaXRlU2hlZXQuX2ltYWdlWzFdLFxyXG4gICAgICAgICAgICBmcmFtZS54LCBmcmFtZS55LFxyXG4gICAgICAgICAgICBmcmFtZS53LCBmcmFtZS5oLFxyXG4gICAgICAgICAgICAwLCAwLFxyXG4gICAgICAgICAgICBmcmFtZS53LCBmcmFtZS5oKTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaWxlKHg6IG51bWJlciwgeTogbnVtYmVyKTogQmxvY2sge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBEYXRhW3ggKyAoeSAqIHRoaXMuX21hcE9wdGlvbi53aWR0aCldO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRUaWxlU2NyZWVuUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBVdGlsLlZlY3RvcjIge1xyXG4gICAgICAgIGxldCB2ZWMyID0geyB4OiAwLCB5OiAwIH07XHJcbiAgICAgICAgbGV0IGluZGV4ID0geCArICh5ICogdGhpcy5fbWFwT3B0aW9uLndpZHRoKTtcclxuICAgICAgICBsZXQgZnJhbWUgPSB0aGlzLl9TcHJpdGVTaGVldC5mcmFtZXNbdGhpcy5fQmxvY2tTcHJpdGVzWzBdXTtcclxuXHJcbiAgICAgICAgdmVjMi54ID0gKGluZGV4ICUgdGhpcy5fbWFwT3B0aW9uLndpZHRoKSAqIGZyYW1lLnc7XHJcbiAgICAgICAgdmVjMi55ID0gKGluZGV4ID4gMCkgPyAoTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuX21hcE9wdGlvbi53aWR0aCkgKiBmcmFtZS5oKSA6IDA7XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWMyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTY3JlZW5Ub1RpbGVQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcik6IFV0aWwuVmVjdG9yMiB7XHJcbiAgICAgICAgbGV0IHZlYzIgPSB7IHg6IDAsIHk6IDAgfTtcclxuICAgICAgICBsZXQgZnJhbWUgPSB0aGlzLl9TcHJpdGVTaGVldC5mcmFtZXNbdGhpcy5fQmxvY2tTcHJpdGVzWzBdXTtcclxuXHJcbiAgICAgICAgdmVjMi54ID0gTWF0aC5mbG9vcih4IC8gZnJhbWUudyk7XHJcbiAgICAgICAgdmVjMi55ID0gTWF0aC5mbG9vcih5IC8gZnJhbWUuaCk7XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWMyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGVja01vdmVGb3JDb2xsaXNpb25YKHBvc1g6IG51bWJlciwgcG9zWTogbnVtYmVyLCBib3VuZFg6IG51bWJlciwgYm91bmRZOiBudW1iZXIsIGludGVudDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgbmV3cG9zaXRpb24gPSBwb3NYO1xyXG4gICAgICAgIGxldCBjb2xsaWRlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IGNoZWNrTGVmdFBvcyA9IE1hdGguZmxvb3IoKHBvc1ggKyBpbnRlbnQpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVXaWR0aCk7XHJcbiAgICAgICAgbGV0IGNoZWNrUmlnaHRQb3MgPSBNYXRoLmZsb29yKChwb3NYICsgaW50ZW50ICsgYm91bmRYKSAvIHRoaXMuX21hcE9wdGlvbi50aWxlV2lkdGgpO1xyXG4gICAgICAgIC8vIGxldCBjaGVja1BvcyA9IE1hdGguZmxvb3IoKHBvc1ggKyBpbnRlbnQgKyBib3VuZFgpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVXaWR0aCk7XHJcblxyXG4gICAgICAgIGxldCB0aWxlWSA9IE1hdGguZmxvb3IoKHBvc1kpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVIZWlnaHQpO1xyXG4gICAgICAgIGxldCB0aWxlQm90dG9tWSA9IE1hdGguZmxvb3IoKHBvc1kgKyBib3VuZFkpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVIZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fbWFwRGF0YVtjaGVja0xlZnRQb3MgKyAodGlsZVkgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9PT0gQmxvY2suR1JPVU5EXHJcbiAgICAgICAgICAgICYmIHRoaXMuX21hcERhdGFbY2hlY2tSaWdodFBvcyArICh0aWxlWSAqIHRoaXMuX21hcE9wdGlvbi53aWR0aCldID09PSBCbG9jay5HUk9VTkRcclxuICAgICAgICAgICAgJiYgdGhpcy5fbWFwRGF0YVtjaGVja0xlZnRQb3MgKyAodGlsZUJvdHRvbVkgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9PT0gQmxvY2suR1JPVU5EXHJcbiAgICAgICAgICAgICYmIHRoaXMuX21hcERhdGFbY2hlY2tSaWdodFBvcyArICh0aWxlQm90dG9tWSAqIHRoaXMuX21hcE9wdGlvbi53aWR0aCldID09PSBCbG9jay5HUk9VTkQpIHtcclxuICAgICAgICAgICAgbmV3cG9zaXRpb24gKz0gaW50ZW50O1xyXG4gICAgICAgICAgICBjb2xsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3cG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNoZWNrTW92ZUZvckNvbGxpc2lvblkocG9zWDogbnVtYmVyLCBwb3NZOiBudW1iZXIsIGJvdW5kWDogbnVtYmVyLCBib3VuZFk6IG51bWJlciwgaW50ZW50OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBuZXdwb3NpdGlvbiA9IHBvc1k7XHJcbiAgICAgICAgbGV0IGNvbGxpZGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgY2hlY2tUb3BQb3MgPSBNYXRoLmZsb29yKChwb3NZICsgaW50ZW50KSAvIHRoaXMuX21hcE9wdGlvbi50aWxlV2lkdGgpO1xyXG4gICAgICAgIGxldCBjaGVja0JvdHRvbVBvcyA9IE1hdGguZmxvb3IoKHBvc1kgKyBpbnRlbnQgKyBib3VuZFkpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVXaWR0aCk7XHJcblxyXG4gICAgICAgIGxldCB0aWxlWCA9IE1hdGguZmxvb3IoKHBvc1gpIC8gdGhpcy5fbWFwT3B0aW9uLnRpbGVXaWR0aCk7XHJcbiAgICAgICAgbGV0IHRpbGVSaWdodFggPSBNYXRoLmZsb29yKChwb3NYICsgYm91bmRYKSAvIHRoaXMuX21hcE9wdGlvbi50aWxlV2lkdGgpO1xyXG5cclxuICAgICAgICBpZiAoKHRoaXMuX21hcERhdGFbdGlsZVggKyAoY2hlY2tUb3BQb3MgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9PT0gQmxvY2suR1JPVU5EKVxyXG4gICAgICAgICAgICAmJiAodGhpcy5fbWFwRGF0YVt0aWxlWCArIChjaGVja0JvdHRvbVBvcyAqIHRoaXMuX21hcE9wdGlvbi53aWR0aCldID09PSBCbG9jay5HUk9VTkQpXHJcbiAgICAgICAgICAgICYmICh0aGlzLl9tYXBEYXRhW3RpbGVSaWdodFggKyAoY2hlY2tUb3BQb3MgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9PT0gQmxvY2suR1JPVU5EKVxyXG4gICAgICAgICAgICAmJiAodGhpcy5fbWFwRGF0YVt0aWxlUmlnaHRYICsgKGNoZWNrQm90dG9tUG9zICogdGhpcy5fbWFwT3B0aW9uLndpZHRoKV0gPT09IEJsb2NrLkdST1VORCkpIHtcclxuICAgICAgICAgICAgbmV3cG9zaXRpb24gKz0gaW50ZW50O1xyXG4gICAgICAgICAgICBjb2xsaWRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3cG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERlc3Ryb3lUaWxlKHRpbGV4OiBudW1iZXIsIHRpbGV5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9ibG9ja0FuaW0ucHVzaChuZXcgQnJlYWtCbG9ja0FuaW0odGlsZXgsdGlsZXksKGJsb2NrKT0+e1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gdGhpcy5fYmxvY2tBbmltLmluZGV4T2YoYmxvY2spO1xyXG4gICAgICAgICAgICB0aGlzLl9ibG9ja0FuaW0uc3BsaWNlKGlkeCwxKTtcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuX21hcERhdGFbdGlsZXggKyAodGlsZXkgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9IEJsb2NrLkdST1VORDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0VGlsZUJvdW5kcyh0aWxleDogbnVtYmVyLCB0aWxleTogbnVtYmVyKTogVXRpbC5jUmVjdGFuZ2xlIHtcclxuICAgICAgICBsZXQgdmVjMiA9IHRoaXMuZ2V0VGlsZVNjcmVlblBvc2l0aW9uKHRpbGV4LHRpbGV5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBVdGlsLmNSZWN0YW5nbGUodmVjMi54LHZlYzIueSx0aGlzLl9tYXBPcHRpb24udGlsZVdpZHRoLHRoaXMuX21hcE9wdGlvbi50aWxlSGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTWFya1RpbGVCb21iKHBvc1g6IG51bWJlciwgcG9zWTogbnVtYmVyKTogVXRpbC5jUmVjdGFuZ2xlIHtcclxuICAgICAgICBsZXQgdGlsZSA9IHRoaXMuZ2V0U2NyZWVuVG9UaWxlUG9zaXRpb24ocG9zWCxwb3NZKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFwRGF0YVt0aWxlLnggKyAodGlsZS55ICogdGhpcy5fbWFwT3B0aW9uLndpZHRoKV0gPSBCbG9jay5HUk9VTkRCT01CO1xyXG5cclxuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJNYXJrVGlsZUJvbWIgeCB7MH0geSB7MX1cIiwgdGlsZS54LHRpbGUueSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLkdldFRpbGVCb3VuZHModGlsZS54LHRpbGUueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFVuTWFya1RpbGVCb21iKHBvc1g6IG51bWJlciwgcG9zWTogbnVtYmVyKTogVXRpbC5jUmVjdGFuZ2xlIHtcclxuICAgICAgICBsZXQgdGlsZSA9IHRoaXMuZ2V0U2NyZWVuVG9UaWxlUG9zaXRpb24ocG9zWCxwb3NZKTtcclxuXHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFwiVW5NYXJrVGlsZUJvbWIgeCB7MH0geSB7MX1cIiwgdGlsZS54LHRpbGUueSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX21hcERhdGFbdGlsZS54ICsgKHRpbGUueSAqIHRoaXMuX21hcE9wdGlvbi53aWR0aCldICE9PSBCbG9jay5HUk9VTkRCT01CKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0aWxlIGlzIG5vdCBncm91bmRib21iXCIpO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXBEYXRhW3RpbGUueCArICh0aWxlLnkgKiB0aGlzLl9tYXBPcHRpb24ud2lkdGgpXSA9IEJsb2NrLkdST1VORDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuR2V0VGlsZUJvdW5kcyh0aWxlLngsdGlsZS55KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eSdcclxuaW1wb3J0IHsgTWFwVGlsZSwgQmxvY2sgfSBmcm9tICcuL21hcCdcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyJ1xyXG5pbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL3V0aWwnXHJcbmltcG9ydCB7IFNwcml0ZVNoZWV0IH0gZnJvbSAnLi4vc3ByaXRlc2hlZXQnXHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vcGxheWVyJ1xyXG5cclxuZW51bSBESVJFQ1RJT04ge1xyXG5cdE5VTEwgPSAtMSxcclxuXHRVUCA9IDAsXHJcblx0RE9XTixcclxuXHRMRUZULFxyXG5cdFJJR0hULFxyXG5cdENPVU5UXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNb25zdGVyIGV4dGVuZHMgRW50aXR5IHtcclxuXHRwcml2YXRlIF9jdXJyZW50UG9zaXRpb246IFV0aWwuVmVjdG9yMjtcclxuXHJcblx0cHJpdmF0ZSBfb2Zmc2V0UG9zaXRpb246IFV0aWwuVmVjdG9yMiA9IG5ldyBVdGlsLlZlY3RvcjIoMSwgLTEwKTtcclxuXHJcblx0cHJpdmF0ZSBfbWFwVGlsZTogTWFwVGlsZSA9IE1hcFRpbGUuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0LyoqXHJcblx0ICogdmVydGljYWwgbW92ZSBzcGVlZCBvZiBtb25zdGVyXHJcblx0ICogQHR5cGUge251bWJlcn1cclxuXHQgKi9cclxuXHRwcml2YXRlIF9tb25zdGVyVmVjdG9yWTogbnVtYmVyID0gMDtcclxuXHJcblx0LyoqXHJcblx0ICogaG9yaXpvbnRhbCBtb3ZlIHNwZWVkIG9mIG1vbnN0ZXJcclxuXHQgKiBAdHlwZSB7bnVtYmVyfVxyXG5cdCAqL1xyXG5cdHByaXZhdGUgX21vbnN0ZXJWZWN0b3JYOiBudW1iZXIgPSAwO1xyXG5cclxuXHQvKipcclxuXHQgKiB0YXJnZXQgWCBzY3JlZW4gcG9zaXRpb24gb2YgbW9uc3RlciBtb3ZlbWVudFxyXG5cdCAqIEB0eXBlIHtudW1iZXJ9XHJcblx0ICovXHJcblx0cHJpdmF0ZSBfbW9uc3RlclRhcmdldFg6IG51bWJlciA9IDA7XHJcblxyXG5cdC8qKlxyXG5cdCAqIHRhcmdldCBZIHNjcmVlbiBwb3NpdGlvbiBvZiBtb25zdGVyIG1vdmVtZW50XHJcblx0ICogQHR5cGUge251bWJlcn1cclxuXHQgKi9cclxuXHRwcml2YXRlIF9tb25zdGVyVGFyZ2V0WTogbnVtYmVyID0gMDtcclxuXHJcblx0cHJpdmF0ZSBfbG9nZ2VyOiBMb2dnZXIgPSBMb2dnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0cHJpdmF0ZSBfbW9uc3RlcldpZHRoOiBudW1iZXIgPSAxNTtcclxuXHRwcml2YXRlIF9tb25zdGVySGVpZ2h0OiBudW1iZXIgPSAxNTtcclxuXHJcblx0cHJpdmF0ZSBfc3RvcFRoaW5raW5nOiBib29sZWFuID0gZmFsc2U7XHJcblx0cHJpdmF0ZSBfbWF4VGlsZVdhbGs6IG51bWJlciA9IDEwO1xyXG5cdC8vIHByaXZhdGUgX3dhbGtQYXRoOiBVdGlsLlZlY3RvcjJbXSA9IFtdO1xyXG5cclxuXHRwcml2YXRlIF9Nb25zdGVyTWFuYWdlcjogTW9uc3Rlck1hbmFnZXI7XHJcblxyXG5cdHByaXZhdGUgX21vdmVEb25lOiAoKSA9PiB2b2lkO1xyXG5cclxuXHRwdWJsaWMgaXNIaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0cHJpdmF0ZSBfbW92ZURpcmVjdGlvbjogRElSRUNUSU9OID0gRElSRUNUSU9OLlVQO1xyXG5cclxuXHRwcml2YXRlIF9tYXhUaGlua0NvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuXHRwcml2YXRlIF9FbmRHYW1lOiAoKSA9PiB2b2lkID0gbnVsbDtcclxuXHJcblx0cHJpdmF0ZSBfU3RvcE1vbnN0ZXJzOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cdGNvbnN0cnVjdG9yKG1hbmFnZXI6IE1vbnN0ZXJNYW5hZ2VyLCB0aWxleDogbnVtYmVyLCB0aWxleTogbnVtYmVyKSB7XHJcblx0XHRzdXBlcigwLCAwLCBcImZyb250XzFfZW5lbXkucG5nXCIsIDIpO1xyXG5cclxuXHRcdHRoaXMuU3Bhd24obWFuYWdlciwgdGlsZXgsIHRpbGV5KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBTcGF3bihtYW5hZ2VyOiBNb25zdGVyTWFuYWdlciwgdGlsZXg6IG51bWJlciwgdGlsZXk6IG51bWJlcikge1xyXG5cdFx0dGhpcy5fTW9uc3Rlck1hbmFnZXIgPSBtYW5hZ2VyO1xyXG5cdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uID0gdGhpcy5fbWFwVGlsZS5nZXRUaWxlU2NyZWVuUG9zaXRpb24odGlsZXgsIHRpbGV5KTtcclxuXHRcdHRoaXMuX2lzSGl0ID0gZmFsc2U7XHJcblx0XHR0aGlzLlVwZGF0ZVBvc2l0aW9uKCk7XHJcblx0XHR0aGlzLl9UaGluaygpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIFVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHRzdXBlci5VcGRhdGUoZGVsdGEpO1xyXG5cdFx0dGhpcy5VcGRhdGVQb3NpdGlvbigpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBVcGRhdGVQb3NpdGlvbigpIHtcclxuXHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54ICs9IHRoaXMuX21vbnN0ZXJWZWN0b3JYO1xyXG5cdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uLnkgKz0gdGhpcy5fbW9uc3RlclZlY3Rvclk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54ID09PSB0aGlzLl9tb25zdGVyVGFyZ2V0WFxyXG5cdFx0XHQmJiB0aGlzLl9jdXJyZW50UG9zaXRpb24ueSA9PT0gdGhpcy5fbW9uc3RlclRhcmdldFkpIHtcclxuXHRcdFx0dGhpcy5fbW9uc3RlclZlY3RvclggPSAwO1xyXG5cdFx0XHR0aGlzLl9tb25zdGVyVmVjdG9yWSA9IDA7XHJcblxyXG5cdFx0XHR0aGlzLl9tb3ZlRG9uZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMueCA9IHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54ICsgdGhpcy5fb2Zmc2V0UG9zaXRpb24ueDtcclxuXHRcdHRoaXMueSA9IHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55ICsgdGhpcy5fb2Zmc2V0UG9zaXRpb24ueTs7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgU3RvcE1vbnN0ZXJzKCk6IHZvaWQge1xyXG5cdFx0dGhpcy5fU3RvcE1vbnN0ZXJzID0gdHJ1ZTtcclxuXHRcdHRoaXMuX21vdmVEb25lKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgRHJhdyhkZWx0YTogbnVtYmVyLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xyXG5cdFx0c3VwZXIuRHJhdyhkZWx0YSwgY3R4KTtcclxuXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF9UaGluaygpIHtcclxuXHRcdGlmICh0aGlzLmlzSGl0IHx8IHRoaXMuX1N0b3BNb25zdGVycykgcmV0dXJuO1xyXG5cclxuXHRcdGlmICh0aGlzLl9tYXhUaGlua0NvdW50IDwgNCkge1xyXG5cdFx0XHRsZXQgY3VycmVudFRpbGVQb3MgPSB0aGlzLl9tYXBUaWxlLmdldFNjcmVlblRvVGlsZVBvc2l0aW9uKHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54LCB0aGlzLl9jdXJyZW50UG9zaXRpb24ueSk7XHJcblx0XHRcdHN3aXRjaCAodGhpcy5fbW92ZURpcmVjdGlvbikge1xyXG5cdFx0XHRcdGNhc2UgRElSRUNUSU9OLlVQOlxyXG5cdFx0XHRcdFx0bGV0IGJsb2NrID0gdGhpcy5fbWFwVGlsZS5nZXRUaWxlKGN1cnJlbnRUaWxlUG9zLngsIGN1cnJlbnRUaWxlUG9zLnkgLSAxKTtcclxuXHRcdFx0XHRcdGlmIChibG9jayAhPT0gQmxvY2suR1JPVU5EKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuX21vdmVEaXJlY3Rpb24gPSBESVJFQ1RJT04uRE9XTjtcclxuXHRcdFx0XHRcdFx0dGhpcy5fbWF4VGhpbmtDb3VudCsrO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9UaGluaygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBESVJFQ1RJT04uRE9XTjpcclxuXHRcdFx0XHRcdGxldCBibG9jayA9IHRoaXMuX21hcFRpbGUuZ2V0VGlsZShjdXJyZW50VGlsZVBvcy54LCBjdXJyZW50VGlsZVBvcy55ICsgMSk7XHJcblx0XHRcdFx0XHRpZiAoYmxvY2sgIT09IEJsb2NrLkdST1VORCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9tb3ZlRGlyZWN0aW9uID0gRElSRUNUSU9OLlJJR0hUO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9tYXhUaGlua0NvdW50Kys7XHJcblx0XHRcdFx0XHRcdHRoaXMuX1RoaW5rKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIERJUkVDVElPTi5SSUdIVDpcclxuXHRcdFx0XHRcdGxldCBibG9jayA9IHRoaXMuX21hcFRpbGUuZ2V0VGlsZShjdXJyZW50VGlsZVBvcy54ICsgMSwgY3VycmVudFRpbGVQb3MueSk7XHJcblx0XHRcdFx0XHRpZiAoYmxvY2sgIT09IEJsb2NrLkdST1VORCkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9tb3ZlRGlyZWN0aW9uID0gRElSRUNUSU9OLkxFRlQ7XHJcblx0XHRcdFx0XHRcdHRoaXMuX21heFRoaW5rQ291bnQrKztcclxuXHRcdFx0XHRcdFx0dGhpcy5fVGhpbmsoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgRElSRUNUSU9OLkxFRlQ6XHJcblx0XHRcdFx0XHRsZXQgYmxvY2sgPSB0aGlzLl9tYXBUaWxlLmdldFRpbGUoY3VycmVudFRpbGVQb3MueCAtIDEsIGN1cnJlbnRUaWxlUG9zLnkpO1xyXG5cdFx0XHRcdFx0aWYgKGJsb2NrICE9PSBCbG9jay5HUk9VTkQpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5fbW92ZURpcmVjdGlvbiA9IERJUkVDVElPTi5VUDtcclxuXHRcdFx0XHRcdFx0dGhpcy5fbWF4VGhpbmtDb3VudCsrO1xyXG5cdFx0XHRcdFx0XHR0aGlzLl9UaGluaygpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdC8vIGNvZGUuLi5cclxuXHRcdFx0XHRcdC8vIGRvbnQgZ28gaGVyZSEhIVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuX21vdmVEaXJlY3Rpb24gPSBESVJFQ1RJT04uTlVMTDtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9Qcm9jZXNzTW92ZW1lbnQodGhpcy5fbW92ZURpcmVjdGlvbik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGFzeW5jIF9Qcm9jZXNzTW92ZW1lbnQobW92ZURpcmVjdGlvbjogRElSRUNUSU9OKSB7XHJcblx0XHRhd2FpdCB0aGlzLl9Nb3ZlVG9UaWxlKG1vdmVEaXJlY3Rpb24pO1xyXG5cdFx0dGhpcy5fbWF4VGhpbmtDb3VudCA9IDA7XHJcblx0XHR0aGlzLl9UaGluaygpO1xyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBfTW92ZVRvVGlsZShtb3ZlRGlyOiBESVJFQ1RJT04pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPigociwgZSkgPT4ge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGxldCBjdXJyZW50VGlsZVBvcyA9IHRoaXMuX21hcFRpbGUuZ2V0U2NyZWVuVG9UaWxlUG9zaXRpb24odGhpcy5fY3VycmVudFBvc2l0aW9uLngsIHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55KTtcclxuXHRcdFx0XHRsZXQgcGF0aCA9IG5ldyBVdGlsLlZlY3RvcjIoMCwgMCk7XHJcblxyXG5cdFx0XHRcdHN3aXRjaCAobW92ZURpcikge1xyXG5cdFx0XHRcdFx0Y2FzZSBESVJFQ1RJT04uVVA6XHJcblx0XHRcdFx0XHRcdHBhdGgueSA9IC0xO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdGNhc2UgRElSRUNUSU9OLkRPV046XHJcblx0XHRcdFx0XHRcdHBhdGgueSA9IDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSBESVJFQ1RJT04uUklHSFQ6XHJcblx0XHRcdFx0XHRcdHBhdGgueCA9IDE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0Y2FzZSBESVJFQ1RJT04uTEVGVDpcclxuXHRcdFx0XHRcdFx0cGF0aC54ID0gLTE7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0Ly8gY29kZS4uLlxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRoaXMuX21vbnN0ZXJWZWN0b3JYID0gcGF0aC54O1xyXG5cdFx0XHRcdHRoaXMuX21vbnN0ZXJWZWN0b3JZID0gcGF0aC55O1xyXG5cclxuXHJcblx0XHRcdFx0bGV0IHRhcmdldFZlYzIgPSB0aGlzLl9tYXBUaWxlLmdldFRpbGVTY3JlZW5Qb3NpdGlvbihjdXJyZW50VGlsZVBvcy54ICsgcGF0aC54LCBjdXJyZW50VGlsZVBvcy55ICsgcGF0aC55KTtcclxuXHJcblx0XHRcdFx0dGhpcy5fbW9uc3RlclRhcmdldFggPSB0YXJnZXRWZWMyLng7XHJcblx0XHRcdFx0dGhpcy5fbW9uc3RlclRhcmdldFkgPSB0YXJnZXRWZWMyLnk7XHJcblxyXG5cdFx0XHRcdHRoaXMuX21vdmVEb25lID0gKCkgPT4ge1xyXG5cdFx0XHRcdFx0cih0cnVlKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0XHRlKGVycik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0cHVibGljIEdldEhpdEJvdW5kcygpOiBVdGlsLmNSZWN0YW5nbGUge1xyXG5cdFx0bGV0IHJlY3QgPSBuZXcgVXRpbC5jUmVjdGFuZ2xlKHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54LCB0aGlzLl9jdXJyZW50UG9zaXRpb24ueSwgdGhpcy5fbW9uc3RlcldpZHRoLCB0aGlzLl9tb25zdGVySGVpZ2h0KTtcclxuXHRcdHJldHVybiByZWN0O1xyXG5cdH1cclxuXHJcblx0cHVibGljIGFzeW5jIERpZSgpIHtcclxuXHRcdExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKFwiTW9uc3RlciBEaWUhXCIpO1xyXG5cdFx0dGhpcy5pc0hpdCA9IHRydWU7XHJcblx0XHR0aGlzLmltYWdlTmFtZSA9IFwiZGVhZF8xX2VuZW15LnBuZ1wiO1xyXG5cdFx0YXdhaXQgVXRpbC5zbGVlcCgxMDAwKTtcclxuXHRcdHRoaXMuX01vbnN0ZXJNYW5hZ2VyLkRlbGV0ZU1vbnN0ZXIodGhpcyk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTW9uc3Rlck1hbmFnZXIge1xyXG5cdHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogTW9uc3Rlck1hbmFnZXIgPSBudWxsO1xyXG5cdHByaXZhdGUgX01vbnN0ZXJzOiBNb25zdGVyW10gPSBbXTtcclxuXHRwcml2YXRlIF9QbGF5ZXI6IFBsYXllciA9IG51bGw7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0aWYgKE1vbnN0ZXJNYW5hZ2VyLl9pbnN0YW5jZSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0xvZ2dlciBpcyBhIHNpbmdsZXRvbicpO1xyXG5cdFx0fVxyXG5cdFx0TW9uc3Rlck1hbmFnZXIuX2luc3RhbmNlID0gdGhpcztcclxuXHRcdHJldHVybiBNb25zdGVyTWFuYWdlci5faW5zdGFuY2U7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IE1vbnN0ZXJNYW5hZ2VyIHtcclxuXHRcdGlmIChNb25zdGVyTWFuYWdlci5faW5zdGFuY2UgPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0TW9uc3Rlck1hbmFnZXIuX2luc3RhbmNlID0gbmV3IE1vbnN0ZXJNYW5hZ2VyKCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gTW9uc3Rlck1hbmFnZXIuX2luc3RhbmNlO1xyXG5cdH1cclxuXHJcblx0cHVibGljIFVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHR0aGlzLl9Nb25zdGVycy5mb3JFYWNoKChtb25zdGVyKSA9PiB7XHJcblx0XHRcdG1vbnN0ZXIuVXBkYXRlKGRlbHRhKTtcclxuXHJcblx0XHRcdGlmKHRoaXMuX1BsYXllci5HZXRIaXRCb3VuZHMoKS5jb2xsaWRlcyhtb25zdGVyLkdldEhpdEJvdW5kcygpKSl7XHJcblx0XHRcdFx0dGhpcy5fUGxheWVyLkRpZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIERyYXcoZGVsdGE6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuXHRcdHRoaXMuX01vbnN0ZXJzLmZvckVhY2goKG1vbnN0ZXIpID0+IHtcclxuXHRcdFx0bW9uc3Rlci5EcmF3KGRlbHRhLCBjdHgpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgU3Bhd25Nb25zdGVyKHRpbGVYOiBudW1iZXIsIHRpbGVZOiBudW1iZXIpIHtcclxuXHRcdHRoaXMuX01vbnN0ZXJzLnB1c2gobmV3IE1vbnN0ZXIodGhpcywgdGlsZVgsIHRpbGVZKSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgaW5pdChwbGF5ZXI6IFBsYXllciwgZW5kZ2FtZTogKCkgPT4gdm9pZCkge1xyXG5cdFx0dGhpcy5fUGxheWVyID0gcGxheWVyO1xyXG5cdFx0dGhpcy5fRW5kR2FtZSA9IGVuZGdhbWU7XHJcblxyXG5cdFx0dGhpcy5fTW9uc3RlcnMubGVuZ3RoID0gMDtcclxuXHJcblx0XHR0aGlzLlNwYXduTW9uc3RlcigxLCAxMyk7XHJcblx0XHR0aGlzLlNwYXduTW9uc3RlcigxOSwgMTMpO1xyXG5cdFx0dGhpcy5TcGF3bk1vbnN0ZXIoMTksIDEpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIEdldE1vbnN0ZXJzKCk6IE1vbnN0ZXJbXSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fTW9uc3RlcnM7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgR2V0UGxheWVycygpOiBNb25zdGVyW10ge1xyXG5cdFx0cmV0dXJuIHRoaXMuX1BsYXllcjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBTdG9wTW9uc3RlcnMoKTogdm9pZCB7XHJcblx0XHR0aGlzLl9Nb25zdGVycy5mb3JFYWNoKChtb25zdGVyKT0+e1xyXG5cdFx0XHRtb25zdGVyLlN0b3BNb25zdGVycygpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgRGVsZXRlTW9uc3Rlcihtb25zdGVyOiBNb25zdGVyKSB7XHJcblx0XHRsZXQgaWR4ID0gdGhpcy5fTW9uc3RlcnMuaW5kZXhPZihtb25zdGVyKTtcclxuXHRcdHRoaXMuX01vbnN0ZXJzW2lkeF0uaXNWaXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdFx0bGV0IGNoZWNrID0gZmFsc2U7XHJcblx0XHR0aGlzLl9Nb25zdGVycy5mb3JFYWNoKChtb25zdGVyKT0+e1xyXG5cdFx0XHRpZighY2hlY2spIGNoZWNrID0gbW9uc3Rlci5pc1Zpc2libGU7XHJcblx0XHR9KTtcclxuXHJcblx0XHRpZighY2hlY2spXHJcblx0XHRcdHRoaXMuX0VuZEdhbWUoKTtcclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eSdcclxuaW1wb3J0IHsgTWFwVGlsZSB9IGZyb20gJy4vbWFwJ1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnZXInXHJcbmltcG9ydCB7IEJvbWJNYW5hZ2VyIH0gZnJvbSAnLi9ib21iLW1hbmFnZXInXHJcbmltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi4vdXRpbCdcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBFbnRpdHkge1xyXG5cclxuXHRwcml2YXRlIF9jdXJyZW50UG9zaXRpb246IFV0aWwuVmVjdG9yMjtcclxuXHJcblx0cHJpdmF0ZSBfb2Zmc2V0UG9zaXRpb246IFV0aWwuVmVjdG9yMiA9IG5ldyBVdGlsLlZlY3RvcjIoMSwgLTEwKTtcclxuXHJcblx0cHJpdmF0ZSBfbWFwVGlsZTogTWFwVGlsZSA9IE1hcFRpbGUuZ2V0SW5zdGFuY2UoKTtcclxuXHJcblx0cHJpdmF0ZSBfcGxheWVyU3BlZWQ6IG51bWJlciA9IDE7XHJcblxyXG5cdHByaXZhdGUgX2xvZ2dlcjogTG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKCk7XHJcblxyXG5cdHByaXZhdGUgX2JvbWJNYW5hZ2VyOiBCb21iTWFuYWdlciA9IEJvbWJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcblxyXG5cdHByaXZhdGUgX3BsYXllcldpZHRoOiBudW1iZXIgPSAxNDtcclxuXHRwcml2YXRlIF9wbGF5ZXJIZWlnaHQ6IG51bWJlciA9IDE0O1xyXG5cclxuXHRwcml2YXRlIF9Jc0RlYWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0cHJpdmF0ZSBfSnVzdEJvbWJEcm9wcGVkUmVjdDogVXRpbC5jUmVjdGFuZ2xlID0gbnVsbDtcclxuXHJcblx0cHJpdmF0ZSBfRW5kR2FtZTogKCk9PnZvaWQgPSBudWxsO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihlbmRnYW1lOiAoKT0+dm9pZCkge1xyXG5cdFx0c3VwZXIoMCwgMCwgXCJmcm9udF8xLnBuZ1wiLCAwKTtcclxuXHJcblx0XHR0aGlzLl9FbmRHYW1lID0gZW5kZ2FtZTtcclxuXHJcblx0XHR0aGlzLlNwYXduKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgU3Bhd24oKSB7XHJcblx0XHR0aGlzLl9Jc0RlYWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuaW1hZ2VOYW1lID0gXCJmcm9udF8xLnBuZ1wiO1xyXG5cdFx0dGhpcy5fY3VycmVudFBvc2l0aW9uID0gdGhpcy5fbWFwVGlsZS5nZXRUaWxlU2NyZWVuUG9zaXRpb24oMSwgMSk7XHJcblx0XHR0aGlzLlVwZGF0ZVBvc2l0aW9uKCk7XHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIFVwZGF0ZShkZWx0YTogbnVtYmVyKTogdm9pZCB7XHJcblx0XHRzdXBlci5VcGRhdGUoZGVsdGEpO1xyXG5cdFx0dGhpcy5VcGRhdGVQb3NpdGlvbigpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIE1vdmVVcCgpOiB2b2lkIHtcclxuXHRcdGlmKCF0aGlzLl9Jc0RlYWQpXHJcblx0XHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55ID0gdGhpcy5fbWFwVGlsZS5jaGVja01vdmVGb3JDb2xsaXNpb25ZKHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54LHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55LCB0aGlzLl9wbGF5ZXJXaWR0aCwgdGhpcy5fcGxheWVySGVpZ2h0ICwgLXRoaXMuX3BsYXllclNwZWVkKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBNb3ZlRG93bigpOiB2b2lkIHtcclxuXHRcdGlmKCF0aGlzLl9Jc0RlYWQpXHJcblx0XHRcdHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55ID0gdGhpcy5fbWFwVGlsZS5jaGVja01vdmVGb3JDb2xsaXNpb25ZKHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54LHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55LCB0aGlzLl9wbGF5ZXJXaWR0aCwgdGhpcy5fcGxheWVySGVpZ2h0LCB0aGlzLl9wbGF5ZXJTcGVlZCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgTW92ZUxlZnQoKTogdm9pZCB7XHJcblx0XHRpZighdGhpcy5fSXNEZWFkKVxyXG5cdFx0XHR0aGlzLl9jdXJyZW50UG9zaXRpb24ueCA9IHRoaXMuX21hcFRpbGUuY2hlY2tNb3ZlRm9yQ29sbGlzaW9uWCh0aGlzLl9jdXJyZW50UG9zaXRpb24ueCx0aGlzLl9jdXJyZW50UG9zaXRpb24ueSwgdGhpcy5fcGxheWVyV2lkdGgsIHRoaXMuX3BsYXllckhlaWdodCwgLXRoaXMuX3BsYXllclNwZWVkKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBNb3ZlUmlnaHQoKTogdm9pZCB7XHJcblx0XHRpZighdGhpcy5fSXNEZWFkKVxyXG5cdFx0XHR0aGlzLl9jdXJyZW50UG9zaXRpb24ueCA9IHRoaXMuX21hcFRpbGUuY2hlY2tNb3ZlRm9yQ29sbGlzaW9uWCh0aGlzLl9jdXJyZW50UG9zaXRpb24ueCx0aGlzLl9jdXJyZW50UG9zaXRpb24ueSwgdGhpcy5fcGxheWVyV2lkdGgsIHRoaXMuX3BsYXllckhlaWdodCwgdGhpcy5fcGxheWVyU3BlZWQpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIERyb3BCb21iKCk6IHZvaWQge1xyXG5cdFx0aWYoIXRoaXMuX0lzRGVhZCl7XHJcblx0XHRcdGxldCBqdXN0ZHJvcHBlZCA9IHRoaXMuX2JvbWJNYW5hZ2VyLlNwYXduQm9tYih0aGlzLl9jdXJyZW50UG9zaXRpb24ueCx0aGlzLl9jdXJyZW50UG9zaXRpb24ueSk7XHJcblxyXG5cdFx0XHRpZihqdXN0ZHJvcHBlZCE9PSBudWxsKXtcclxuXHRcdCAgICBcdHRoaXMuX0p1c3RCb21iRHJvcHBlZFJlY3QgPSBqdXN0ZHJvcHBlZDtcclxuXHJcblx0XHQgICAgXHRpZighdGhpcy5HZXRIaXRCb3VuZHMoKS5jb2xsaWRlcyh0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0KSl7XHJcblx0XHRcdFx0XHR0aGlzLl9tYXBUaWxlLk1hcmtUaWxlQm9tYlBhc3ModGhpcy5fSnVzdEJvbWJEcm9wcGVkUmVjdC54LHRoaXMuX0p1c3RCb21iRHJvcHBlZFJlY3QueSk7XHJcblx0XHRcdFx0XHR0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0ID0gbnVsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGlmKHRoaXMuX0p1c3RCb21iRHJvcHBlZFJlY3QgPT09IG51bGwpXHJcblx0XHRcdC8vIFx0dGhyb3cgbmV3IGVycm9yKFwidGhpcy5fSnVzdEJvbWJEcm9wcGVkUmVjdCBpcyBudWxsIVwiLCB0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0KTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgYXN5bmMgRGllKCkge1xyXG5cdFx0TG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoXCJQbGF5ZXIgRGllIVwiKTtcclxuXHRcdHRoaXMuX0lzRGVhZCA9IHRydWU7XHJcblx0XHR0aGlzLmltYWdlTmFtZSA9IFwiZGVhZF8xLnBuZ1wiO1xyXG5cdFx0YXdhaXQgVXRpbC5zbGVlcCgxMDAwKTtcclxuXHRcdHRoaXMuX0VuZEdhbWUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBVcGRhdGVQb3NpdGlvbigpIHtcclxuXHRcdHRoaXMueCA9IHRoaXMuX2N1cnJlbnRQb3NpdGlvbi54ICsgdGhpcy5fb2Zmc2V0UG9zaXRpb24ueDtcclxuXHRcdHRoaXMueSA9IHRoaXMuX2N1cnJlbnRQb3NpdGlvbi55ICsgdGhpcy5fb2Zmc2V0UG9zaXRpb24ueTtcclxuXHJcblx0XHRpZih0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0ICE9PSBudWxsKSB7XHJcblx0XHRcdGlmKCF0aGlzLkdldEhpdEJvdW5kcygpLmNvbGxpZGVzKHRoaXMuX0p1c3RCb21iRHJvcHBlZFJlY3QpKXtcclxuXHRcdFx0XHR0aGlzLl9tYXBUaWxlLk1hcmtUaWxlQm9tYih0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0LngsdGhpcy5fSnVzdEJvbWJEcm9wcGVkUmVjdC55KTtcclxuXHRcdFx0XHR0aGlzLl9KdXN0Qm9tYkRyb3BwZWRSZWN0ID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIERyYXcoZGVsdGE6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuXHRcdHN1cGVyLkRyYXcoZGVsdGEsIGN0eCk7XHJcblxyXG5cdH1cclxuXHJcblx0cHVibGljIEdldEhpdEJvdW5kcygpOiBVdGlsLmNSZWN0YW5nbGV7XHJcblx0XHRsZXQgcmVjdCA9IG5ldyBVdGlsLmNSZWN0YW5nbGUodGhpcy5fY3VycmVudFBvc2l0aW9uLngsdGhpcy5fY3VycmVudFBvc2l0aW9uLnksdGhpcy5fcGxheWVyV2lkdGgsdGhpcy5fcGxheWVySGVpZ2h0KTtcclxuXHRcdHJldHVybiByZWN0O1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcidcclxuaW1wb3J0IHsgV2luZG93TWFuYWdlciB9IGZyb20gJy4vd2luZG93LW1hbmFnZXInXHJcbmltcG9ydCB7IFNwcml0ZVNoZWV0IH0gZnJvbSAnLi9zcHJpdGVzaGVldCdcclxuaW1wb3J0IHsgU3RhdGUsIE1haW5HYW1lIH0gZnJvbSAnLi9zdGF0ZXMvaW5kZXgnXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHYW1lT3B0aW9ucyB7XHJcbiAgd2lkdGg/OiBudW1iZXI7XHJcblxyXG4gIGhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgY2FudmFzRWxlbWVudElkPzogc3RyaW5nO1xyXG5cclxuICBzcHJpdGVTaGVldFVybDogc3RyaW5nW107XHJcblxyXG4gIHRpbWVTY2FsZTogMTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWUge1xyXG5cclxuICBwdWJsaWMgd2luZG93TWFuYWdlcjogV2luZG93TWFuYWdlcjtcclxuXHJcbiAgcHVibGljIHNwcml0ZXNoZWV0OiBTcHJpdGVTaGVldDtcclxuXHJcbiAgcHJpdmF0ZSBfbG9nZ2VyOiBMb2dnZXI7XHJcblxyXG4gIHByaXZhdGUgX2xhc3RUaW1lOiBudW1iZXIgPSBEYXRlLm5vdygpO1xyXG5cclxuICBwcml2YXRlIF90aW1lU2NhbGU6IG51bWJlciA9IDE7XHJcblxyXG4gIHByaXZhdGUgX2N1cnJlbnRTdGF0ZTogU3RhdGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBJR2FtZU9wdGlvbnMpIHtcclxuXHJcbiAgICB0aGlzLl9sb2dnZXIgPSBMb2dnZXIuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoXCJzdGFydGluZyB1cCB0aGUgZW5naW5lLi4uXCIpO1xyXG5cclxuICAgIHRoaXMud2luZG93TWFuYWdlciA9IG5ldyBXaW5kb3dNYW5hZ2VyKG9wdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuc3ByaXRlc2hlZXQgPSBuZXcgU3ByaXRlU2hlZXQob3B0aW9ucy5zcHJpdGVTaGVldFVybCk7XHJcblxyXG4gICAgdGhpcy5fdGltZVNjYWxlID0gb3B0aW9ucy50aW1lU2NhbGU7XHJcblxyXG4gICAgdGhpcy5zcHJpdGVzaGVldC5sb2FkKCkudGhlbigoKSA9PiB7IHRoaXMuc3RhcnQoKSB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGFydCgpIHtcclxuICAgIHRoaXMuX2N1cnJlbnRTdGF0ZSA9IG5ldyBNYWluR2FtZSgpO1xyXG4gICAgdGhpcy5fY3VycmVudFRpY2sgPSAwO1xyXG4gICAgdGhpcy5fdXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBfdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgdmFyIGVsYXBzZWQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLSB0aGlzLl9sYXN0VGltZSkgfHwgMTtcclxuICAgIHZhciBkZWx0YSA9IGVsYXBzZWQgKiB0aGlzLl90aW1lU2NhbGU7XHJcblxyXG5cclxuICAgIHRoaXMuX2N1cnJlbnRTdGF0ZS5VcGRhdGUoZGVsdGEpO1xyXG4gICAgdGhpcy5fY3VycmVudFN0YXRlLkRyYXcoZGVsdGEsIHRoaXMud2luZG93TWFuYWdlci5jdHgpO1xyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl91cGRhdGUuYmluZCh0aGlzKSlcclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFV0aWwgZnJvbSAnLi91dGlsJ1xyXG5cclxuXHJcbmNvbnN0IGVudW0gS0VZTUFQIHtcclxuICAgIFVQID0gODcsIC8vICd3J1xyXG4gICAgRE9XTiA9IDgzLCAvLyAncydcclxuICAgIExFRlQgPSA2NSwgLy8gJ2EnXHJcbiAgICBSSUdIVCA9IDY4LCAvLyAnZCdcclxuICAgIEJPTUIgPSAzMiwgLy8gJ3NwYWNlJ1xyXG4gICAgRVNDID0gMjcsIC8vICdlc2MnXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRPcHRpb25zIHtcclxuICAgIFVwX0tleURvd246ICgpID0+IHZvaWQ7XHJcbiAgICBEb3duX0tleURvd246ICgpID0+IHZvaWQ7XHJcbiAgICBMZWZ0X0tleURvd246ICgpID0+IHZvaWQ7XHJcbiAgICBSaWdodF9LZXlEb3duOiAoKSA9PiB2b2lkO1xyXG4gICAgQk9NQl9LZXlEb3duOiAoKSA9PiB2b2lkO1xyXG4gICAgRVNDX0tleURvd246ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgVXBfS2V5VXA6ICgpID0+IHZvaWQ7XHJcbiAgICBEb3duX0tleVVwOiAoKSA9PiB2b2lkO1xyXG4gICAgTGVmdF9LZXlVcDogKCkgPT4gdm9pZDtcclxuICAgIFJpZ2h0X0tleVVwOiAoKSA9PiB2b2lkO1xyXG4gICAgQk9NQl9LZXlVcDogKCkgPT4gdm9pZDtcclxuICAgIEVTQ19LZXlVcDogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENvbnRyb2xsZXIge1xyXG4gICAgcHJpdmF0ZSBfSW5wdXRPcHRpb25zOiBJbnB1dE9wdGlvbnM7XHJcblxyXG4gICAgcHJpdmF0ZSBfa2V5UHJlc3NlZDogeyBba2V5Om51bWJlcl0gOiBib29sZWFuIH07XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSW5wdXRPcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5fSW5wdXRPcHRpb25zID0gb3B0aW9ucztcclxuXHJcbiAgICAgICAgdGhpcy5fa2V5UHJlc3NlZCA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLl9rZXlQcmVzc2VkW0tFWU1BUC5VUF0gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9rZXlQcmVzc2VkW0tFWU1BUC5ET1dOXSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2tleVByZXNzZWRbS0VZTUFQLkxFRlRdID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fa2V5UHJlc3NlZFtLRVlNQVAuUklHSFRdID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fa2V5UHJlc3NlZFtLRVlNQVAuQk9NQl0gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9rZXlQcmVzc2VkW0tFWU1BUC5FU0NdID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpPT4geyB0aGlzLl9LZXlEb3duQ2FsbGJhY2soZSl9KTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZSk9PiB7IHRoaXMuX0tleVVwQ2FsbGJhY2soZSl9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlKCkge1xyXG4gICAgICAgIGlmKHRoaXMuX2tleVByZXNzZWRbS0VZTUFQLlVQXSkgdGhpcy5fSW5wdXRPcHRpb25zLlVwX0tleURvd24oKTtcclxuICAgICAgICBpZih0aGlzLl9rZXlQcmVzc2VkW0tFWU1BUC5ET1dOXSkgdGhpcy5fSW5wdXRPcHRpb25zLkRvd25fS2V5RG93bigpO1xyXG4gICAgICAgIGlmKHRoaXMuX2tleVByZXNzZWRbS0VZTUFQLkxFRlRdKSB0aGlzLl9JbnB1dE9wdGlvbnMuTGVmdF9LZXlEb3duKCk7XHJcbiAgICAgICAgaWYodGhpcy5fa2V5UHJlc3NlZFtLRVlNQVAuUklHSFRdKSB0aGlzLl9JbnB1dE9wdGlvbnMuUmlnaHRfS2V5RG93bigpO1xyXG4gICAgICAgIGlmKHRoaXMuX2tleVByZXNzZWRbS0VZTUFQLkJPTUJdKSB0aGlzLl9JbnB1dE9wdGlvbnMuQk9NQl9LZXlEb3duKCk7XHJcbiAgICAgICAgaWYodGhpcy5fa2V5UHJlc3NlZFtLRVlNQVAuRVNDXSkgdGhpcy5fSW5wdXRPcHRpb25zLkVTQ19LZXlEb3duKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX0tleURvd25DYWxsYmFjayhlOiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGtjb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGU7XHJcbiAgICAgICAgdGhpcy5fa2V5UHJlc3NlZFtrY29kZV0gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX0tleVVwQ2FsbGJhY2soZTogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIHZhciBrY29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xyXG4gICAgICAgIHRoaXMuX2tleVByZXNzZWRba2NvZGVdID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFySW5wdXRzICgpIHtcclxuICAgICAgICB0aGlzLl9JbnB1dE9wdGlvbnMgPSBudWxsO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGVudW0gTG9nTGV2ZWwge1xyXG4gICBEZWJ1ZyxcclxuICAgSW5mbyxcclxuICAgV2FybixcclxuICAgRXJyb3IsXHJcbiAgIEZhdGFsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xyXG4gICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IExvZ2dlciA9IG51bGw7XHJcblxyXG4gICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgaWYgKExvZ2dlci5faW5zdGFuY2UpIHtcclxuICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgaXMgYSBzaW5nbGV0b24nKTtcclxuICAgICAgfVxyXG4gICAgICBMb2dnZXIuX2luc3RhbmNlID0gdGhpcztcclxuICAgICAgcmV0dXJuIExvZ2dlci5faW5zdGFuY2U7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWZhdWx0TGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuSW5mbztcclxuXHJcbiAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTG9nZ2VyIHtcclxuICAgICAgaWYgKExvZ2dlci5faW5zdGFuY2UgPT0gbnVsbCkge1xyXG5cclxuICAgICAgICAgTG9nZ2VyLl9pbnN0YW5jZSA9IG5ldyBMb2dnZXIoKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gTG9nZ2VyLl9pbnN0YW5jZTtcclxuICAgfVxyXG5cclxuICAgcHJpdmF0ZSBfbG9nKGxldmVsOiBMb2dMZXZlbCwgYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgICAgaWYgKGxldmVsID09IG51bGwpIHtcclxuICAgICAgICAgbGV2ZWwgPSB0aGlzLmRlZmF1bHRMZXZlbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IGNvbnNvbGUgYXJncyBhcnJheVxyXG4gICAgICB2YXIgY29uc29sZUFyZ3M6IGFueVtdID0gW107XHJcbiAgICAgIGNvbnNvbGVBcmdzLnVuc2hpZnQuYXBwbHkoY29uc29sZUFyZ3MsIGFyZ3MpO1xyXG4gICAgICBjb25zb2xlQXJncy51bnNoaWZ0KCdbJyArIExvZ0xldmVsW2xldmVsXSArICddIDogJyk7XHJcblxyXG4gICAgICBpZiAobGV2ZWwgPCBMb2dMZXZlbC5XYXJuKSB7XHJcblxyXG4gICAgICAgICAvLyBDYWxsIC5sb2cgZm9yIERlYnVnL0luZm9cclxuICAgICAgICAgaWYgKGNvbnNvbGUubG9nLmFwcGx5KSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgcmVxdWlyZWQgb24gc29tZSBvbGRlciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgYXBwbHkgb24gY29uc29sZS5sb2cgOihcclxuICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgY29uc29sZUFyZ3MpO1xyXG4gICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb25zb2xlQXJncy5qb2luKCcgJykpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAobGV2ZWwgPCBMb2dMZXZlbC5FcnJvcikge1xyXG5cclxuICAgICAgICAgLy8gQ2FsbCAud2FybiBmb3IgV2FyblxyXG4gICAgICAgICBpZiAoY29uc29sZS53YXJuLmFwcGx5KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihjb25zb2xlQXJncy5qb2luKCcgJykpO1xyXG4gICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAvLyBDYWxsIC5lcnJvciBmb3IgRXJyb3IvRmF0YWxcclxuICAgICAgICAgaWYgKGNvbnNvbGUuZXJyb3IuYXBwbHkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBjb25zb2xlQXJncyk7XHJcbiAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoY29uc29sZUFyZ3Muam9pbignICcpKTtcclxuICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9sb2coTG9nTGV2ZWwuRGVidWcsIGFyZ3MpO1xyXG4gICB9XHJcblxyXG4gICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9sb2coTG9nTGV2ZWwuSW5mbywgYXJncyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5XYXJuLCBhcmdzKTtcclxuICAgfVxyXG5cclxuICAgcHVibGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2xvZyhMb2dMZXZlbC5FcnJvciwgYXJncyk7XHJcbiAgIH1cclxuXHJcbiAgIHB1YmxpYyBmYXRhbCguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9sb2coTG9nTGV2ZWwuRmF0YWwsIGFyZ3MpO1xyXG4gICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi91dGlsJ1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcidcclxuXHJcbmV4cG9ydCBjbGFzcyBTcHJpdGVTaGVldCB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFNwcml0ZVNoZWV0ID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgZnJhbWVzOiB7IFtpbmRleDogc3RyaW5nXTogVXRpbHMuY1JlY3RhbmdsZSB9ID0ge307XHJcbiAgICBwdWJsaWMgX2ltYWdlOiBIVE1MSW1hZ2VFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIF9pbWFnZVVybHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBwcml2YXRlIF9qc29uVXJsczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIF9sb2dnZXI6IExvZ2dlciA9IExvZ2dlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAoU3ByaXRlU2hlZXQuX2luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3ByaXRlU2hlZXQgaXMgYSBzaW5nbGV0b24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2ltYWdlVXJscyA9IHVybDtcclxuXHJcbiAgICAgICAgdmFyIHRlbXB1cmwgPSB1cmw7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHggb2YgdGVtcHVybCkge1xyXG4gICAgICAgICAgICB4ID0geC5yZXBsYWNlKFwiLnBuZ1wiLCBcIlwiKSArIFwiLmpzb25cIjtcclxuICAgICAgICAgICAgdGhpcy5fanNvblVybHMucHVzaCh4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFNwcml0ZVNoZWV0Ll9pbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIFNwcml0ZVNoZWV0Ll9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBTcHJpdGVTaGVldCB7XHJcbiAgICAgICAgaWYgKFNwcml0ZVNoZWV0Ll9pbnN0YW5jZSA9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICBTcHJpdGVTaGVldC5faW5zdGFuY2UgPSBuZXcgU3ByaXRlU2hlZXQoWycnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTcHJpdGVTaGVldC5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGxvYWQoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdzdGFydCBsb2FkaW5nIHNwcml0ZXNoZWV0IGpzb24uLicpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQganNvblVybCBvZiB0aGlzLl9qc29uVXJscykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdsb2FkaW5nIHNwcml0ZXNoZWV0IGpzb246ICcgKyBqc29uVXJsKTtcclxuICAgICAgICAgICAgICAgIGxldCBqID0gYXdhaXQgVXRpbHMuZ2V0WE1MUmVxdWVzdChqc29uVXJsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uUmVhZChKU09OLnBhcnNlKGopKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdzdGFydCBsb2FkaW5nIHNwcml0ZXNoZWV0IHBuZy4uJyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbWFnZVVybCBvZiB0aGlzLl9pbWFnZVVybHMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnbG9hZGluZyBzcHJpdGVzaGVldCBwbmc6ICcgKyBpbWFnZVVybCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZS5wdXNoKGF3YWl0IHRoaXMuX2xvYWRJbWFnZShpbWFnZVVybCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcodGhpcy5faW1hZ2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJ2ZpbmlzaGVkIGxvYWRpbmcgc3ByaXRlc2hlZXRzLi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJ2Vycm9yIGxvYWRpbmcgc3ByaXRlc2hlZXQuLicgKyBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9sb2FkSW1hZ2UodXJsOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW1nLnNyYyA9IHVybDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9vblJlYWQoZGF0YTogYW55KSB7XHJcbiAgICAgICAgdmFyIHRlbXBfZnJhbWU6IFV0aWxzLmNSZWN0YW5nbGU7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGZyYW1lX25hbWUgaW4gZGF0YS5mcmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIHNwcml0ZV9kYXRhOiBhbnkgPSBkYXRhLmZyYW1lc1tmcmFtZV9uYW1lXTtcclxuXHJcbiAgICAgICAgICAgIHRlbXBfZnJhbWUgPSBuZXcgVXRpbHMuY1JlY3RhbmdsZShzcHJpdGVfZGF0YS5mcmFtZS54LFxyXG4gICAgICAgICAgICAgICAgc3ByaXRlX2RhdGEuZnJhbWUueSxcclxuICAgICAgICAgICAgICAgIHNwcml0ZV9kYXRhLmZyYW1lLncsXHJcbiAgICAgICAgICAgICAgICBzcHJpdGVfZGF0YS5mcmFtZS5oKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVzW2ZyYW1lX25hbWVdID0gdGVtcF9mcmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERyYXcoeDogbnVtYmVyLCB5OiBudW1iZXIsIHRleHR1cmU6IG51bWJlciwgc3ByaXRlbmFtZTogc3RyaW5nLCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZVt0ZXh0dXJlXSxcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzW3Nwcml0ZW5hbWVdLngsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc1tzcHJpdGVuYW1lXS55LFxyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZXNbc3ByaXRlbmFtZV0udyxcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzW3Nwcml0ZW5hbWVdLmgsXHJcbiAgICAgICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVzW3Nwcml0ZW5hbWVdLncsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lc1tzcHJpdGVuYW1lXS5oKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZXJyb3IoXCJlcnJvciBkcmF3aW5nIFwiICsgc3ByaXRlbmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufSIsImV4cG9ydCAqIGZyb20gJy4vc3RhdGUnXHJcbmV4cG9ydCAqIGZyb20gJy4vdGl0bGVzY3JlZW4nXHJcbmV4cG9ydCAqIGZyb20gJy4vbWFpbmdhbWUnIiwiaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL3N0YXRlJ1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdGllcy9lbnRpdHknXHJcbmltcG9ydCB7IE1hcFRpbGUgfSBmcm9tICcuLi9lbnRpdGllcy9tYXAnXHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uL2VudGl0aWVzL3BsYXllcidcclxuaW1wb3J0IHsgSW5wdXRDb250cm9sbGVyLCBJbnB1dE9wdGlvbnMgfSBmcm9tICcuLi9pbnB1dCdcclxuaW1wb3J0IHsgQm9tYk1hbmFnZXIgfSBmcm9tICcuLi9lbnRpdGllcy9ib21iLW1hbmFnZXInXHJcbmltcG9ydCB7IE1vbnN0ZXJNYW5hZ2VyIH0gZnJvbSAnLi4vZW50aXRpZXMvbW9uc3Rlci1tYW5hZ2VyJ1xyXG5pbXBvcnQgeyBXaW5kb3dNYW5hZ2VyIH0gZnJvbSAnLi4vd2luZG93LW1hbmFnZXInXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcidcclxuXHJcbmV4cG9ydCBjbGFzcyBNYWluR2FtZSBleHRlbmRzIFN0YXRlIHtcclxuICAgIC8vIHByaXZhdGUgU3ByVGl0bGVTY3JlZW46IEVudGl0eTtcclxuICAgIHByaXZhdGUgX01hcFRpbGU6IE1hcFRpbGU7XHJcbiAgICBwcml2YXRlIF9QbGF5ZXI6IFBsYXllcjtcclxuICAgIHByaXZhdGUgX0lucHV0Q29udHJvbGxlcjogSW5wdXRDb250cm9sbGVyO1xyXG4gICAgcHJpdmF0ZSBfQm9tYk1hbmFnZXI6IEJvbWJNYW5hZ2VyID0gQm9tYk1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHByaXZhdGUgX01vbnN0ZXJNYW5hZ2VyOiBNb25zdGVyTWFuYWdlciA9IE1vbnN0ZXJNYW5hZ2VyLmdldEluc3RhbmNlKCk7XHJcbiAgICBwcml2YXRlIF9XaW5kb3dNYW5hZ2VyOiBXaW5kb3dNYW5hZ2VyID0gV2luZG93TWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIHByaXZhdGUgX2lzUGF1c2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9tb3VzZURvd25MaXN0ZW5lcjogKCk9PnZvaWQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5fTWFwVGlsZSA9IE1hcFRpbGUuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB0aGlzLmFkZEVudGl0aWVzKHRoaXMuX0JvbWJNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fUGxheWVyID0gbmV3IFBsYXllcigoKT0+e3RoaXMuRW5kR2FtZSgpO30pO1xyXG4gICAgICAgIHRoaXMuYWRkRW50aXRpZXModGhpcy5fUGxheWVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5fSW5wdXRDb250cm9sbGVyID0gbmV3IElucHV0Q29udHJvbGxlcihcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgVXBfS2V5RG93bjogKCk9Pnt0aGlzLl9QbGF5ZXIuTW92ZVVwKCk7fSxcclxuICAgICAgICAgICAgICAgIERvd25fS2V5RG93bjogKCk9Pnt0aGlzLl9QbGF5ZXIuTW92ZURvd24oKTt9LFxyXG4gICAgICAgICAgICAgICAgTGVmdF9LZXlEb3duOiAoKT0+e3RoaXMuX1BsYXllci5Nb3ZlTGVmdCgpO30sXHJcbiAgICAgICAgICAgICAgICBSaWdodF9LZXlEb3duOiAoKT0+e3RoaXMuX1BsYXllci5Nb3ZlUmlnaHQoKTt9LFxyXG4gICAgICAgICAgICAgICAgQk9NQl9LZXlEb3duOiAoKT0+e3RoaXMuX1BsYXllci5Ecm9wQm9tYigpO30sXHJcbiAgICAgICAgICAgICAgICBFU0NfS2V5RG93bjogKCk6IHZvaWQgPT4ge30sXHJcblxyXG4gICAgICAgICAgICAgICAgVXBfS2V5VXA6ICgpPT57dGhpcy5fUGxheWVyLk1vdmVVcCgpO30sXHJcbiAgICAgICAgICAgICAgICBEb3duX0tleVVwOiAoKT0+e3RoaXMuX1BsYXllci5Nb3ZlRG93bigpO30sXHJcbiAgICAgICAgICAgICAgICBMZWZ0X0tleVVwOiAoKT0+e3RoaXMuX1BsYXllci5Nb3ZlTGVmdCgpO30sXHJcbiAgICAgICAgICAgICAgICBSaWdodF9LZXlVcDogKCk9Pnt0aGlzLl9QbGF5ZXIuTW92ZVJpZ2h0KCk7fSxcclxuICAgICAgICAgICAgICAgIEJPTUJfS2V5VXA6ICgpPT57dGhpcy5fUGxheWVyLkRyb3BCb21iKCk7fSxcclxuICAgICAgICAgICAgICAgIEVTQ19LZXlVcDogKCk6IHZvaWQgPT4ge31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHRoaXMuX01vbnN0ZXJNYW5hZ2VyLmluaXQodGhpcy5fUGxheWVyLCgpPT57dGhpcy5FbmRHYW1lKCk7fSk7XHJcblxyXG4gICAgICAgIHRoaXMuX21vdXNlRG93bkxpc3RlbmVyID0gKCk9Pnt0aGlzLkluaXRHYW1lKCk7fTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgRW5kR2FtZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pc1BhdXNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9Nb25zdGVyTWFuYWdlci5TdG9wTW9uc3RlcnMoKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLl9tb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEluaXRHYW1lICgpOiB2b2lkIHtcclxuICAgICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhcIkluaXQgR2FtZS4uXCIpO1xyXG4gICAgICAgIHRoaXMuX2lzUGF1c2UgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fUGxheWVyLlNwYXduKCk7XHJcbiAgICAgICAgdGhpcy5fTW9uc3Rlck1hbmFnZXIuaW5pdCh0aGlzLl9QbGF5ZXIsKCk9Pnt0aGlzLkVuZEdhbWUoKTt9KTtcclxuXHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fbW91c2VEb3duTGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlVwZGF0ZShkZWx0YSk7XHJcblxyXG4gICAgICAgIGlmKCF0aGlzLl9pc1BhdXNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX01vbnN0ZXJNYW5hZ2VyLlVwZGF0ZShkZWx0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuX0lucHV0Q29udHJvbGxlci5VcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERyYXcoZGVsdGE6IG51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9NYXBUaWxlLkRyYXcoZGVsdGEsIGN0eCk7XHJcbiAgICAgICAgc3VwZXIuRHJhdyhkZWx0YSwgY3R4KTtcclxuICAgICAgICB0aGlzLl9Nb25zdGVyTWFuYWdlci5EcmF3KGRlbHRhLGN0eCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX2lzUGF1c2UpIHtcclxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY3R4LmZvbnQgPSBcIjI1cHggQXJpYWxcIjtcclxuICAgICAgICAgICAgbGV0IGNlbnRlclggPSB0aGlzLl9XaW5kb3dNYW5hZ2VyLmNhbnZhc1dpZHRoIC8gMjtcclxuICAgICAgICAgICAgbGV0IGNlbnRlclkgPSB0aGlzLl9XaW5kb3dNYW5hZ2VyLmNhbnZhc0hlaWdodCAvIDI7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgICAgICBjdHguZmlsbFRleHQoXCJHYW1lIE92ZXIhXCIsY2VudGVyWCxjZW50ZXJZIC0gNTApO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlVGV4dChcIkdhbWUgT3ZlciFcIixjZW50ZXJYLGNlbnRlclkgLSA1MCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChcIkNsaWNrIG9uIHNjcmVlbiB0byBwbGF5IGFnYWluXCIsY2VudGVyWCxjZW50ZXJZKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQoXCJDbGljayBvbiBzY3JlZW4gdG8gcGxheSBhZ2FpblwiLGNlbnRlclgsY2VudGVyWSk7XHJcblxyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vZW50aXR5J1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXRlIHtcclxuICAgIGVudGl0aWVzOiBBcnJheTxFbnRpdHk+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgRXhpdCgpIHtcclxuICAgICAgICB0aGlzLmVudGl0aWVzLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEVudGl0aWVzKGVudGl0eTogRW50aXR5KTogTnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5wdXNoKGVudGl0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUVudGl0aWVzKGVudGl0eTogRW50aXR5KTogTnVtYmVyIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmVudGl0aWVzLmluZGV4T2YoZW50aXR5LCAwKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgIHRoaXMuZW50aXRpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXRpZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBVcGRhdGUoZGVsdGE6IE51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGZvciAodmFyIGVudGl0eSBvZiB0aGlzLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIGVudGl0eS5VcGRhdGUoZGVsdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIERyYXcoZGVsdGE6IE51bWJlciwgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKHZhciBlbnRpdHkgb2YgdGhpcy5lbnRpdGllcykge1xyXG4gICAgICAgICAgICBlbnRpdHkuRHJhdyhkZWx0YSxjdHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9zdGF0ZSdcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXRpZXMvZW50aXR5J1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUaXRsZVNjcmVlbiBleHRlbmRzIFN0YXRlIHtcclxuICAgIHByaXZhdGUgU3ByVGl0bGVTY3JlZW46IEVudGl0eTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLlNwclRpdGxlU2NyZWVuID0gbmV3IEVudGl0eSgwLCAwLCAndGl0bGVzY3JlZW4vYmFja2dyb3VuZC5wbmcnKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRFbnRpdGllcyh0aGlzLlNwclRpdGxlU2NyZWVuKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5VcGRhdGUoZGVsdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBEcmF3KGRlbHRhOiBOdW1iZXIsIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuRHJhdyhkZWx0YSwgY3R4KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJ1xyXG5cclxuXHJcbi8qKlxyXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL2dldHRpbmctc3RhcnRlZC9wcmltZXJzL3Byb21pc2VzXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgdXJsIFtkZXNjcmlwdGlvbl1cclxuICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSAgICAgW2Rlc2NyaXB0aW9uXVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFhNTFJlcXVlc3QodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgLy8gUmV0dXJuIGEgbmV3IHByb21pc2UuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAvLyBEbyB0aGUgdXN1YWwgWEhSIHN0dWZmXHJcbiAgICAgICAgdmFyIGxvZ2dlciA9IExvZ2dlci5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcblxyXG4gICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwpO1xyXG5cclxuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgY2FsbGVkIGV2ZW4gb24gNDA0IGV0Y1xyXG4gICAgICAgICAgICAvLyBzbyBjaGVjayB0aGUgc3RhdHVzXHJcbiAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PT0gWE1MSHR0cFJlcXVlc3QuRE9ORSAmJiByZXEuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVzb2x2ZSB0aGUgcHJvbWlzZSB3aXRoIHRoZSByZXNwb25zZSB0ZXh0XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlcS5yZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UgcmVqZWN0IHdpdGggdGhlIHN0YXR1cyB0ZXh0XHJcbiAgICAgICAgICAgICAgICAvLyB3aGljaCB3aWxsIGhvcGVmdWxseSBiZSBhIG1lYW5pbmdmdWwgZXJyb1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKHJlcS5zdGF0dXNUZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgbmV0d29yayBlcnJvcnNcclxuICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZWplY3QoRXJyb3IoXCJOZXR3b3JrIEVycm9yXCIpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBNYWtlIHRoZSByZXF1ZXN0XHJcbiAgICAgICAgcmVxLnNlbmQoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmVjdG9yMiB7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihfeDogbnVtYmVyLCBfeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0gX3g7XHJcbiAgICAgICAgdGhpcy55ID0gX3k7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBjUmVjdGFuZ2xlIHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCB3OiBudW1iZXIgPSAxLCBoOiBudW1iZXIgPSAxKSB7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICAgIHRoaXMudyA9IHc7XHJcbiAgICAgICAgdGhpcy5oID0gaDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgd2l0aGluKG91dGVyX3JlY3Q6IGNSZWN0YW5nbGUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAob3V0ZXJfcmVjdC54ID4gdGhpcy54KSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IGluIGl0O1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG91dGVyX3JlY3QueSA+IHRoaXMueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG91dGVyX3JlY3QueCArIG91dGVyX3JlY3QudyA8IHRoaXMueCArIHRoaXMudykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG91dGVyX3JlY3QueSArIG91dGVyX3JlY3QuaCA8IHRoaXMueSArIHRoaXMuaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBjb2xsaWRlcyhvdXRlcl9yZWN0OiBjUmVjdGFuZ2xlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcodGhpcywgb3V0ZXJfcmVjdCk7XHJcblxyXG4gICAgICAgIHJldHVybiAhKFxyXG4gICAgICAgICAgICAodGhpcy55ICsgdGhpcy5oIDwgb3V0ZXJfcmVjdC55KSB8fFxyXG4gICAgICAgICAgICAodGhpcy55ID4gb3V0ZXJfcmVjdC55ICsgb3V0ZXJfcmVjdC5oKSB8fFxyXG4gICAgICAgICAgICAodGhpcy54ID4gb3V0ZXJfcmVjdC54ICsgb3V0ZXJfcmVjdC53KSB8fFxyXG4gICAgICAgICAgICAodGhpcy54ICsgdGhpcy53IDwgb3V0ZXJfcmVjdC54KSlcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL2FkdmFuY2VkLXR5cGVzLmh0bWxcclxuICogQHR5cGUge1t0eXBlXX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQ8VCwgVT4oZmlyc3Q6IFQsIHNlY29uZDogVSk6IFQgJiBVIHtcclxuICAgIGxldCByZXN1bHQgPSA8VCAmIFU+e307XHJcbiAgICBmb3IgKGxldCBpZCBpbiBmaXJzdCkge1xyXG4gICAgICAgICg8YW55PnJlc3VsdClbaWRdID0gKDxhbnk+Zmlyc3QpW2lkXTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGlkIGluIHNlY29uZCkge1xyXG4gICAgICAgIGlmICghcmVzdWx0Lmhhc093blByb3BlcnR5KGlkKSkge1xyXG4gICAgICAgICAgICAoPGFueT5yZXN1bHQpW2lkXSA9ICg8YW55PnNlY29uZClbaWRdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKiBiYXNpYyBzbGVlcCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBhc3luYyBmdW5jdGlvbnMgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKG1zID0gMCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtcykpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNvcnRBcnJheSh2YWx1ZXM6IGFueVtdKSB7XHJcbiAgICByZXR1cm4gdmFsdWVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICBpZiAoYSA8IGIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGEgPiBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIDBcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2lyY2xlQ29sbGlzaW9uKG9iajE6IFZlY3RvcjIsIG9iajI6IFZlY3RvcjIsIHJhZDE6IG51bWJlciwgcmFkMjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgaGl0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gR2V0IGRpc3RhbmNlIHdpdGggUHl0aGFnb3Jhc1xyXG4gICAgbGV0IHNxdWFyZWRpc3QgPSAob2JqMS54ICogb2JqMi54KSArIChvYmoxLnkgKiBvYmoyLnkpO1xyXG4gICAgaGl0ID0gc3F1YXJlZGlzdCA8PSAocmFkMSArIHJhZDIpICogKHJhZDEgKyByYWQyKTtcclxuXHJcbiAgICByZXR1cm4gaGl0O1xyXG59XHJcbiIsImltcG9ydCB7IElHYW1lT3B0aW9ucyB9IGZyb20gJy4vZ2FtZSdcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInXHJcblxyXG5leHBvcnQgY2xhc3MgV2luZG93TWFuYWdlciB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFdpbmRvd01hbmFnZXIgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgX29wdGlvbnM6IElHYW1lT3B0aW9ucztcclxuICAgIHByaXZhdGUgX2xvZ2dlcjogTG9nZ2VyO1xyXG5cclxuICAgIHB1YmxpYyBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG5cclxuICAgIHB1YmxpYyBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgICBwdWJsaWMgY2FudmFzRWxlbWVudElkOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNhbnZhc1dpZHRoOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIGNhbnZhc0hlaWdodDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBJR2FtZU9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoV2luZG93TWFuYWdlci5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgaXMgYSBzaW5nbGV0b24nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fbG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIFdpbmRvd01hbmFnZXIuX2luc3RhbmNlID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIFdpbmRvd01hbmFnZXIuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogV2luZG93TWFuYWdlciB7XHJcbiAgICAgICAgaWYgKFdpbmRvd01hbmFnZXIuX2luc3RhbmNlID09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgIFdpbmRvd01hbmFnZXIuX2luc3RhbmNlID0gbmV3IFdpbmRvd01hbmFnZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFdpbmRvd01hbmFnZXIuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2luaXRpYWxpemUoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXNFbGVtZW50SWQgPSB0aGlzLl9vcHRpb25zLmNhbnZhc0VsZW1lbnRJZDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMuY2FudmFzRWxlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnVXNpbmcgQ2FudmFzIGVsZW1lbnQgc3BlY2lmaWVkOiAnICsgdGhpcy5fb3B0aW9ucy5jYW52YXNFbGVtZW50SWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IDxIVE1MQ2FudmFzRWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLl9vcHRpb25zLmNhbnZhc0VsZW1lbnRJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdVc2luZyBnZW5lcmF0ZWQgY2FudmFzIGVsZW1lbnQnKTtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy53aWR0aCAmJiB0aGlzLl9vcHRpb25zLmhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJ0VuZ2luZSB2aWV3cG9ydCBpcyBzaXplICcgKyB0aGlzLl9vcHRpb25zLndpZHRoICsgJyB4ICcgKyB0aGlzLl9vcHRpb25zLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzV2lkdGggPSB0aGlzLl9vcHRpb25zLndpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0hlaWdodCA9IHRoaXMuX29wdGlvbnMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB0aGlzLmNhbnZhc1dpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmNhbnZhc0hlaWdodDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY3R4ID0gPENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD50aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGlmICghdGhpcy5jYW52YXNFbGVtZW50SWQpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmN0eC5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN0eC53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAvLyB0aGlzLmN0eC5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9vblJlc2l6ZSgpO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5fb25SZXNpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9vblJlc2l6ZSgpIHtcclxuICAgICAgICBpZiAoKHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0KSA8IDEuNClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG5cclxuICAgICAgICB2YXIgcmF0aW8gPSB0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMuY2FudmFzLmhlaWdodDtcclxuICAgICAgICB2YXIgd2lkdGggPSBoZWlnaHQgKiByYXRpbztcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXMtZ2FtZVwiKS5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhcy1nYW1lXCIpLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcbiAgICB9XHJcblxyXG59IiwiaW1wb3J0IHsgR2FtZSB9IGZyb20gJy4vZW5naW5lL2dhbWUnXHJcblxyXG5jb25zb2xlLmxvZygnV2VsY29tZSB0byBCYWt1ZGFuIEJveSEnKTtcclxuXHJcbnZhciBteUdhbWUgPSBuZXcgR2FtZSh7XHJcbiAgICB3aWR0aDogMzM2LFxyXG4gICAgaGVpZ2h0OiAyNDAsXHJcbiAgICBjYW52YXNFbGVtZW50SWQ6ICdjYW52YXMtZ2FtZScsXHJcbiAgICBzcHJpdGVTaGVldFVybDogW1xyXG4gICAgICAgICcvYXNzZXRzL2ltYWdlL2Jha3VkYW5ib3kucG5nJyxcclxuICAgICAgICAnL2Fzc2V0cy9pbWFnZS9ibG9ja3MucG5nJyxcclxuICAgICAgICAnL2Fzc2V0cy9pbWFnZS9lbmVteS5wbmcnLFxyXG4gICAgXSxcclxuICAgIHRpbWVTY2FsZTogMSxcclxufSk7XHJcbiJdfQ=="}