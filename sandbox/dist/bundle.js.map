{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/babel-runtime/core-js/object/create.js","node_modules/babel-runtime/core-js/object/set-prototype-of.js","node_modules/babel-runtime/core-js/promise.js","node_modules/core-js/library/fn/object/create.js","node_modules/core-js/library/fn/object/set-prototype-of.js","node_modules/core-js/library/fn/promise.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_add-to-unscopables.js","node_modules/core-js/library/modules/_an-instance.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_classof.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_for-of.js","node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_invoke.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_is-array-iter.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_iter-call.js","node_modules/core-js/library/modules/_iter-create.js","node_modules/core-js/library/modules/_iter-define.js","node_modules/core-js/library/modules/_iter-detect.js","node_modules/core-js/library/modules/_iter-step.js","node_modules/core-js/library/modules/_iterators.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_microtask.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_object-gopd.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_redefine-all.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_set-proto.js","node_modules/core-js/library/modules/_set-species.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_species-constructor.js","node_modules/core-js/library/modules/_string-at.js","node_modules/core-js/library/modules/_task.js","node_modules/core-js/library/modules/_to-index.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/core.get-iterator-method.js","node_modules/core-js/library/modules/es6.array.iterator.js","node_modules/core-js/library/modules/es6.object.create.js","node_modules/core-js/library/modules/es6.object.set-prototype-of.js","node_modules/core-js/library/modules/es6.object.to-string.js","node_modules/core-js/library/modules/es6.promise.js","node_modules/core-js/library/modules/es6.string.iterator.js","node_modules/core-js/library/modules/web.dom.iterable.js","src/engine/entities/entity.ts","src/engine/game.ts","src/engine/logger.ts","src/engine/spritesheet.ts","src/engine/states/index.ts","src/engine/states/state.ts","src/engine/states/titlescreen.ts","src/engine/util.ts","src/engine/window-manager.ts","src/main.ts"],"names":[],"mappings":"AAAA;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;;ACAA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;;ACJA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;;ACFA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACZA,4BAA4C;AAE5C;AASI,oBAAY,AAAc,QAAE,AAAc,QAAE,AAAW;AALhD,aAAS,YAAY,AAAI,AAAC;AAGzB,aAAY,eAAgB,cAAW,YAAC,AAAW,AAAE,AAAC;AAG1D,AAAI,aAAC,AAAC,IAAG,AAAM,AAAC;AAChB,AAAI,aAAC,AAAC,IAAG,AAAM,AAAC;AAChB,AAAI,aAAC,AAAS,YAAG,AAAG,AAAC,AAEzB;AAAC;AAEM,qBAAM,SAAb,UAAc,AAAa,OAG3B,CAAC;AAEM,qBAAI,OAAX,UAAY,AAAa,OAAE,AAA6B;AACpD,AAAE,AAAC,YAAC,CAAC,AAAI,KAAC,AAAU,AAAC,WACjB,AAAM,AAAC;A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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/promise\"), __esModule: true };","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D){\n  return $Object.create(P, D);\n};","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nmodule.exports = require('../modules/_core').Promise;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","module.exports = function(it, Constructor, name, forbiddenField){\n  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};","var isObject = require('./_is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject')\n  , toLength  = require('./_to-length')\n  , toIndex   = require('./_to-index');\nmodule.exports = function(IS_INCLUDES){\n  return function($this, el, fromIndex){\n    var O      = toIObject($this)\n      , length = toLength(O.length)\n      , index  = toIndex(fromIndex, length)\n      , value;\n    // Array#includes uses SameValueZero equality algorithm\n    if(IS_INCLUDES && el != el)while(length > index){\n      value = O[index++];\n      if(value != value)return true;\n    // Array#toIndex ignores holes, Array#includes - not\n    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n      if(O[index] === el)return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof')\n  , TAG = require('./_wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function(it, key){\n  try {\n    return it[key];\n  } catch(e){ /* empty */ }\n};\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","var core = module.exports = {version: '2.4.0'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require('./_is-object')\n  , document = require('./_global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');","var global    = require('./_global')\n  , core      = require('./_core')\n  , ctx       = require('./_ctx')\n  , hide      = require('./_hide')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , expProto  = exports[PROTOTYPE]\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(a, b, c){\n        if(this instanceof C){\n          switch(arguments.length){\n            case 0: return new C;\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if(IS_PROTO){\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library` \nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","var ctx         = require('./_ctx')\n  , call        = require('./_iter-call')\n  , isArrayIter = require('./_is-array-iter')\n  , anObject    = require('./_an-object')\n  , toLength    = require('./_to-length')\n  , getIterFn   = require('./core.get-iterator-method')\n  , BREAK       = {}\n  , RETURN      = {};\nvar exports = module.exports = function(iterable, entries, fn, that, ITERATOR){\n  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator, result;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if(result === BREAK || result === RETURN)return result;\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    result = call(iterator, f, step.value, entries);\n    if(result === BREAK || result === RETURN)return result;\n  }\n};\nexports.BREAK  = BREAK;\nexports.RETURN = RETURN;","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var dP         = require('./_object-dp')\n  , createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function(object, key, value){\n  return dP.f(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require('./_global').document && document.documentElement;","module.exports = !require('./_descriptors') && !require('./_fails')(function(){\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;\n});","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// check on default Array iterator\nvar Iterators  = require('./_iterators')\n  , ITERATOR   = require('./_wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};","'use strict';\nvar create         = require('./_object-create')\n  , descriptor     = require('./_property-desc')\n  , setToStringTag = require('./_set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require('./_library')\n  , $export        = require('./_export')\n  , redefine       = require('./_redefine')\n  , hide           = require('./_hide')\n  , has            = require('./_has')\n  , Iterators      = require('./_iterators')\n  , $iterCreate    = require('./_iter-create')\n  , setToStringTag = require('./_set-to-string-tag')\n  , getPrototypeOf = require('./_object-gpo')\n  , ITERATOR       = require('./_wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n    , methods, key, IteratorPrototype;\n  // Fix native\n  if($anyNative){\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n    if(IteratorPrototype !== Object.prototype){\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if(DEF_VALUES && $native && $native.name !== VALUES){\n    VALUES_BUG = true;\n    $default = function values(){ return $native.call(this); };\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES ? $default : getMethod(VALUES),\n      keys:    IS_SET     ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","var ITERATOR     = require('./_wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ return {done: safe = true}; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","module.exports = true;","var global    = require('./_global')\n  , macrotask = require('./_task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require('./_cof')(process) == 'process';\n\nmodule.exports = function(){\n  var head, last, notify;\n\n  var flush = function(){\n    var parent, fn;\n    if(isNode && (parent = process.domain))parent.exit();\n    while(head){\n      fn   = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch(e){\n        if(head)notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if(parent)parent.enter();\n  };\n\n  // Node.js\n  if(isNode){\n    notify = function(){\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if(Observer){\n    var toggle = true\n      , node   = document.createTextNode('');\n    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n    notify = function(){\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if(Promise && Promise.resolve){\n    var promise = Promise.resolve();\n    notify = function(){\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function(){\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function(fn){\n    var task = {fn: fn, next: undefined};\n    if(last)last.next = task;\n    if(!head){\n      head = task;\n      notify();\n    } last = task;\n  };\n};","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject    = require('./_an-object')\n  , dPs         = require('./_object-dps')\n  , enumBugKeys = require('./_enum-bug-keys')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , Empty       = function(){ /* empty */ }\n  , PROTOTYPE   = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function(){\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe')\n    , i      = enumBugKeys.length\n    , lt     = '<'\n    , gt     = '>'\n    , iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties){\n  var result;\n  if(O !== null){\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty;\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject       = require('./_an-object')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , toPrimitive    = require('./_to-primitive')\n  , dP             = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if(IE8_DOM_DEFINE)try {\n    return dP(O, P, Attributes);\n  } catch(e){ /* empty */ }\n  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n  if('value' in Attributes)O[P] = Attributes.value;\n  return O;\n};","var dP       = require('./_object-dp')\n  , anObject = require('./_an-object')\n  , getKeys  = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){\n  anObject(O);\n  var keys   = getKeys(Properties)\n    , length = keys.length\n    , i = 0\n    , P;\n  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};","var pIE            = require('./_object-pie')\n  , createDesc     = require('./_property-desc')\n  , toIObject      = require('./_to-iobject')\n  , toPrimitive    = require('./_to-primitive')\n  , has            = require('./_has')\n  , IE8_DOM_DEFINE = require('./_ie8-dom-define')\n  , gOPD           = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if(IE8_DOM_DEFINE)try {\n    return gOPD(O, P);\n  } catch(e){ /* empty */ }\n  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n};","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has         = require('./_has')\n  , toObject    = require('./_to-object')\n  , IE_PROTO    = require('./_shared-key')('IE_PROTO')\n  , ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function(O){\n  O = toObject(O);\n  if(has(O, IE_PROTO))return O[IE_PROTO];\n  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};","var has          = require('./_has')\n  , toIObject    = require('./_to-iobject')\n  , arrayIndexOf = require('./_array-includes')(false)\n  , IE_PROTO     = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function(object, names){\n  var O      = toIObject(object)\n    , i      = 0\n    , result = []\n    , key;\n  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while(names.length > i)if(has(O, key = names[i++])){\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys       = require('./_object-keys-internal')\n  , enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O){\n  return $keys(O, enumBugKeys);\n};","exports.f = {}.propertyIsEnumerable;","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","var hide = require('./_hide');\nmodule.exports = function(target, src, safe){\n  for(var key in src){\n    if(safe && target[key])target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};","module.exports = require('./_hide');","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object')\n  , anObject = require('./_an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};","'use strict';\nvar global      = require('./_global')\n  , core        = require('./_core')\n  , dP          = require('./_object-dp')\n  , DESCRIPTORS = require('./_descriptors')\n  , SPECIES     = require('./_wks')('species');\n\nmodule.exports = function(KEY){\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};","var def = require('./_object-dp').f\n  , has = require('./_has')\n  , TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var shared = require('./_shared')('keys')\n  , uid    = require('./_uid');\nmodule.exports = function(key){\n  return shared[key] || (shared[key] = uid(key));\n};","var global = require('./_global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require('./_an-object')\n  , aFunction = require('./_a-function')\n  , SPECIES   = require('./_wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};","var toInteger = require('./_to-integer')\n  , defined   = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","var ctx                = require('./_ctx')\n  , invoke             = require('./_invoke')\n  , html               = require('./_html')\n  , cel                = require('./_dom-create')\n  , global             = require('./_global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require('./_cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};","var toInteger = require('./_to-integer')\n  , max       = Math.max\n  , min       = Math.min;\nmodule.exports = function(index, length){\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject')\n  , defined = require('./_defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function(it){\n  return Object(defined(it));\n};","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function(it, S){\n  if(!isObject(it))return it;\n  var fn, val;\n  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var store      = require('./_shared')('wks')\n  , uid        = require('./_uid')\n  , Symbol     = require('./_global').Symbol\n  , USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function(name){\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;","var classof   = require('./_classof')\n  , ITERATOR  = require('./_wks')('iterator')\n  , Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables')\n  , step             = require('./_iter-step')\n  , Iterators        = require('./_iterators')\n  , toIObject        = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","var $export = require('./_export')\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', {create: require('./_object-create')});","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});","","'use strict';\nvar LIBRARY            = require('./_library')\n  , global             = require('./_global')\n  , ctx                = require('./_ctx')\n  , classof            = require('./_classof')\n  , $export            = require('./_export')\n  , isObject           = require('./_is-object')\n  , aFunction          = require('./_a-function')\n  , anInstance         = require('./_an-instance')\n  , forOf              = require('./_for-of')\n  , speciesConstructor = require('./_species-constructor')\n  , task               = require('./_task').set\n  , microtask          = require('./_microtask')()\n  , PROMISE            = 'Promise'\n  , TypeError          = global.TypeError\n  , process            = global.process\n  , $Promise           = global[PROMISE]\n  , process            = global.process\n  , isNode             = classof(process) == 'process'\n  , empty              = function(){ /* empty */ }\n  , Internal, GenericPromiseCapability, Wrapper;\n\nvar USE_NATIVE = !!function(){\n  try {\n    // correct subclassing with @@species support\n    var promise     = $Promise.resolve(1)\n      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch(e){ /* empty */ }\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // with library wrapper special case\n  return a === b || a === $Promise && b === Wrapper;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar newPromiseCapability = function(C){\n  return sameConstructor($Promise, C)\n    ? new PromiseCapability(C)\n    : new GenericPromiseCapability(C);\n};\nvar PromiseCapability = GenericPromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject  = aFunction(reject);\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(promise, isReject){\n  if(promise._n)return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function(){\n    var value = promise._v\n      , ok    = promise._s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , domain  = reaction.domain\n        , result, then;\n      try {\n        if(handler){\n          if(!ok){\n            if(promise._h == 2)onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if(handler === true)result = value;\n          else {\n            if(domain)domain.enter();\n            result = handler(value);\n            if(domain)domain.exit();\n          }\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if(isReject && !promise._h)onUnhandled(promise);\n  });\n};\nvar onUnhandled = function(promise){\n  task.call(global, function(){\n    var value = promise._v\n      , abrupt, handler, console;\n    if(isUnhandled(promise)){\n      abrupt = perform(function(){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if(abrupt)throw abrupt.error;\n  });\n};\nvar isUnhandled = function(promise){\n  if(promise._h == 1)return false;\n  var chain = promise._a || promise._c\n    , i     = 0\n    , reaction;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar onHandleUnhandled = function(promise){\n  task.call(global, function(){\n    var handler;\n    if(isNode){\n      process.emit('rejectionHandled', promise);\n    } else if(handler = global.onrejectionhandled){\n      handler({promise: promise, reason: promise._v});\n    }\n  });\n};\nvar $reject = function(value){\n  var promise = this;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if(!promise._a)promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function(value){\n  var promise = this\n    , then;\n  if(promise._d)return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if(promise === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      microtask(function(){\n        var wrapper = {_w: promise, _d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch(e){\n    $reject.call({_w: promise, _d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor){\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch(err){\n      $reject.call(this, err);\n    }\n  };\n  Internal = function Promise(executor){\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail   = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if(this._a)this._a.push(reaction);\n      if(this._s)notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n  PromiseCapability = function(){\n    var promise  = new Internal;\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject  = ctx($reject, promise, 1);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = newPromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;\n    var capability = newPromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      var values    = []\n        , index     = 0\n        , remaining = 1;\n      forOf(iterable, false, function(promise){\n        var $index        = index++\n          , alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled  = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = this\n      , capability = newPromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});","'use strict';\nvar $at  = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","require('./es6.array.iterator');\nvar global        = require('./_global')\n  , hide          = require('./_hide')\n  , Iterators     = require('./_iterators')\n  , TO_STRING_TAG = require('./_wks')('toStringTag');\n\nfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n  var NAME       = collections[i]\n    , Collection = global[NAME]\n    , proto      = Collection && Collection.prototype;\n  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}","import { SpriteSheet } from '../spritesheet'\r\n\r\nexport class Entity {\r\n    public id: number;\r\n    public x: number;\r\n    public y: number;\r\n    public isVisible: boolean = true;\r\n    public imageName: string;\r\n\r\n    private _SpriteSheet: SpriteSheet = SpriteSheet.getInstance();\r\n\r\n    constructor(paramx: number, paramy: number, img: string) {\r\n        this.x = paramx;\r\n        this.y = paramy;\r\n        this.imageName = img;\r\n\r\n    }\r\n\r\n    public Update(delta: number): void {\r\n\r\n\r\n    }\r\n\r\n    public Draw(delta: number, ctx: CanvasRenderingContext2D): void {\r\n        if (!this.isVisible )\r\n            return;\r\n\r\n        ctx.save();\r\n        ctx.translate(this.x, this.y);\r\n        ctx.drawImage(this._SpriteSheet._image,\r\n            this._SpriteSheet.frames[this.imageName].x, this._SpriteSheet.frames[this.imageName].y,\r\n            this._SpriteSheet.frames[this.imageName].w, this._SpriteSheet.frames[this.imageName].h,\r\n            0, 0,\r\n            this._SpriteSheet.frames[this.imageName].w, this._SpriteSheet.frames[this.imageName].h);\r\n        ctx.restore();\r\n    }\r\n}","import { Logger } from './logger'\r\nimport { WindowManager } from './window-manager'\r\nimport { SpriteSheet } from './spritesheet'\r\nimport { State, TitleScreen } from './states/index'\r\n\r\nexport interface IGameOptions  {\r\n    width?: number;\r\n\r\n    height?: number;\r\n\r\n    canvasElementId?: string;\r\n\r\n    spriteSheetUrl: string;\r\n\r\n    timeScale: 1;\r\n}\r\n\r\nexport class Game {\r\n\r\n    public windowManager: WindowManager;\r\n\r\n    public spritesheet: SpriteSheet;\r\n\r\n    private _logger: Logger;\r\n\r\n    private _lastTime: number = Date.now();\r\n\r\n    private _timeScale: number = 1;\r\n\r\n    private _currentState: State;\r\n\r\n    constructor(options?: IGameOptions) {\r\n\r\n      this._logger = Logger.getInstance();\r\n\r\n      this._logger.debug(\"starting up the engine...\");\r\n\r\n      this.windowManager = new WindowManager(options);\r\n\r\n      this.spritesheet = new SpriteSheet(options.spriteSheetUrl);\r\n\r\n      this._timeScale = options.timeScale;\r\n    }\r\n\r\n    public start() {\r\n        this._currentState = new TitleScreen();\r\n\r\n        this.spritesheet.load().then(this._update.bind(this));\r\n\r\n        this._logger.debug(\"game has started\");\r\n    }\r\n\r\n    _update(): void {\r\n        var elapsed = Math.floor(Date.now() - this._lastTime) || 1;\r\n        var delta = elapsed * this._timeScale;\r\n\r\n        this._currentState.Update(delta);\r\n\r\n        this._currentState.Draw(delta, this.windowManager.ctx);\r\n\r\n        requestAnimationFrame(this._update.bind(this))\r\n    }\r\n}","export enum LogLevel {\r\n   Debug,\r\n   Info,\r\n   Warn,\r\n   Error,\r\n   Fatal\r\n}\r\n\r\nexport class Logger {\r\n   private static _instance: Logger = null;\r\n\r\n   constructor() {\r\n      if (Logger._instance) {\r\n         throw new Error('Logger is a singleton');\r\n      }\r\n      Logger._instance = this;\r\n      return Logger._instance;\r\n   }\r\n\r\n   public defaultLevel: LogLevel = LogLevel.Info;\r\n\r\n   public static getInstance(): Logger {\r\n      if (Logger._instance == null) {\r\n\r\n         Logger._instance = new Logger();\r\n      }\r\n      return Logger._instance;\r\n   }\r\n\r\n   private _log(level: LogLevel, args: any[]): void {\r\n      if (level == null) {\r\n         level = this.defaultLevel;\r\n      }\r\n\r\n      // Create a new console args array\r\n      var consoleArgs: any[] = [];\r\n      consoleArgs.unshift.apply(consoleArgs, args);\r\n      consoleArgs.unshift('[' + LogLevel[level] + '] : ');\r\n\r\n      if (level < LogLevel.Warn) {\r\n\r\n         // Call .log for Debug/Info\r\n         if (console.log.apply) {\r\n            // this is required on some older browsers that don't support apply on console.log :(\r\n            console.log.apply(console, consoleArgs);\r\n         } else {\r\n            console.log(consoleArgs.join(' '));\r\n         }\r\n      } else if (level < LogLevel.Error) {\r\n\r\n         // Call .warn for Warn\r\n         if (console.warn.apply) {\r\n            console.warn.apply(console, consoleArgs);\r\n         } else {\r\n            console.warn(consoleArgs.join(' '));\r\n         }\r\n      } else {\r\n\r\n         // Call .error for Error/Fatal\r\n         if (console.error.apply) {\r\n            console.error.apply(console, consoleArgs);\r\n         } else {\r\n            console.error(consoleArgs.join(' '));\r\n         }\r\n      }\r\n   }\r\n\r\n   public debug(...args: any[]): void {\r\n      this._log(LogLevel.Debug, args);\r\n   }\r\n\r\n   public info(...args: any[]): void {\r\n      this._log(LogLevel.Info, args);\r\n   }\r\n\r\n   public warn(...args: any[]): void {\r\n      this._log(LogLevel.Warn, args);\r\n   }\r\n\r\n   public error(...args: any[]): void {\r\n      this._log(LogLevel.Error, args);\r\n   }\r\n\r\n   public fatal(...args: any[]): void {\r\n      this._log(LogLevel.Fatal, args);\r\n   }\r\n}\r\n","import * as Utils from './util'\r\nimport { Logger } from './logger'\r\n\r\nexport class SpriteSheet {\r\n    private static _instance: SpriteSheet = null;\r\n\r\n    public frames: { [index: string]: Utils.cRectangle } = {};\r\n    public _image: HTMLImageElement;\r\n\r\n    private _imageUrl: string = \"\";\r\n    private _jsonUrl: string = \"\";\r\n\r\n    private _logger: Logger = Logger.getInstance();\r\n\r\n    constructor(url: string) {\r\n        if (SpriteSheet._instance) {\r\n            throw new Error('SpriteSheet is a singleton');\r\n        }\r\n\r\n        this._imageUrl = url;\r\n        this._jsonUrl = url.replace(\".png\", \"\") + \".json\";\r\n\r\n        SpriteSheet._instance = this;\r\n        return SpriteSheet._instance;\r\n    }\r\n\r\n\r\n    public static getInstance(): SpriteSheet {\r\n        if (SpriteSheet._instance == null) {\r\n\r\n            SpriteSheet._instance = new SpriteSheet('');\r\n        }\r\n        return SpriteSheet._instance;\r\n    }\r\n\r\n    public async load() {\r\n        try {\r\n            this._logger.debug('start loading spritesheet json..');\r\n            var json = await Utils.getXMLRequest(this._jsonUrl);\r\n\r\n            this._onRead(JSON.parse(json));\r\n\r\n            this._logger.debug('start loading spritesheet png..');\r\n            this._image = await this._loadImage(this._imageUrl);\r\n\r\n            this._logger.debug('loaded spritesheet..');\r\n        }\r\n        catch (err) {\r\n            this._logger.debug('error loading spritesheet..' + err.message);\r\n        }\r\n\r\n    }\r\n\r\n    private _loadImage(url: string): Promise<HTMLImageElement> {\r\n        return new Promise(function(resolve, reject) {\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                resolve(img);\r\n            }\r\n            img.onerror = function() {\r\n                reject(null);\r\n            }\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n    private _onRead(data: any) {\r\n        var temp_frame: Utils.cRectangle;\r\n\r\n        for (var frame_name in data.frames) {\r\n            var sprite_data: any = data.frames[frame_name];\r\n\r\n            temp_frame = new Utils.cRectangle(sprite_data.frame.x,\r\n                sprite_data.frame.y,\r\n                sprite_data.frame.w,\r\n                sprite_data.frame.h);\r\n\r\n            this.frames[frame_name] = temp_frame;\r\n        }\r\n    }\r\n}","export * from './state'\r\nexport * from './titlescreen'","import { Entity } from './entity'\r\n\r\nexport class State {\r\n    entities: Array<Entity>;\r\n\r\n    constructor() {\r\n        this.entities = [];\r\n    }\r\n\r\n    public Exit() {\r\n        this.entities.length = 0;\r\n    }\r\n\r\n    public addEntities(entity: Entity): Number {\r\n        return this.entities.push(entity);\r\n    }\r\n\r\n    public removeEntities(entity: Entity): Number {\r\n        var index = this.entities.indexOf(entity, 0);\r\n        if (index > -1) {\r\n           this.entities.splice(index, 1);\r\n        }\r\n        return this.entities.length;\r\n    }\r\n\r\n    public Update(delta: Number): void {\r\n        for (var entity of this.entities) {\r\n            entity.Update(delta);\r\n        }\r\n\r\n    }\r\n\r\n    public Draw(delta: Number, ctx: CanvasRenderingContext2D): void {\r\n        for (var entity of this.entities) {\r\n            entity.Draw(delta,ctx);\r\n        }\r\n    }\r\n}","import { State } from './state'\r\nimport { Entity } from '../entities/entity'\r\n\r\n\r\nexport class TitleScreen extends State {\r\n    private SprTitleScreen: Entity;\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.SprTitleScreen = new Entity(0,0,'titlescreen/background.png');\r\n\r\n        this.addEntities(this.SprTitleScreen);\r\n    }\r\n\r\n    public Update(delta: number): void {\r\n        super.Update(delta);\r\n    }\r\n\r\n    public Draw(delta: Number, ctx: CanvasRenderingContext2D): void {\r\n        super.Draw(delta,ctx);\r\n    }\r\n}","/**\r\n * https://developers.google.com/web/fundamentals/getting-started/primers/promises\r\n * @param  {string}       url [description]\r\n * @return {Promise<any>}     [description]\r\n */\r\nexport function getXMLRequest(url: string): Promise<any> {\r\n  // Return a new promise.\r\n  return new Promise<any>(function(resolve, reject) {\r\n    // Do the usual XHR stuff\r\n    var req = new XMLHttpRequest();\r\n    req.open('GET', url);\r\n\r\n    req.onload = function() {\r\n      // This is called even on 404 etc\r\n      // so check the status\r\n      if (req.readyState === XMLHttpRequest.DONE && req.status == 200) {\r\n        // Resolve the promise with the response text\r\n        resolve(req.response);\r\n      }\r\n      else {\r\n        // Otherwise reject with the status text\r\n        // which will hopefully be a meaningful error\r\n        reject(Error(req.statusText));\r\n      }\r\n    };\r\n\r\n    // Handle network errors\r\n    req.onerror = function() {\r\n      reject(Error(\"Network Error\"));\r\n    };\r\n\r\n    // Make the request\r\n    req.send();\r\n  });\r\n}\r\n\r\nexport class cRectangle {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n\r\n    constructor(x: number = 0, y: number = 0, w: number = 1, h: number = 1) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    within(outer_rect: cRectangle): boolean {\r\n\r\n        if (outer_rect.x > this.x) {\r\n            // this is not in it;\r\n            return false;\r\n        }\r\n        else if (outer_rect.y > this.y) {\r\n            return false;\r\n        }\r\n        else if (outer_rect.x + outer_rect.w < this.x + this.w) {\r\n            return false;\r\n        }\r\n        else if (outer_rect.y + outer_rect.h < this.y + this.h) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n}","import { IGameOptions } from './game'\r\nimport { Logger } from './logger'\r\n\r\nexport class WindowManager {\r\n\r\n    private _options: IGameOptions;\r\n    private _logger: Logger;\r\n\r\n    public canvas: HTMLCanvasElement;\r\n\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    public canvasElementId: string;\r\n\r\n    public canvasWidth: number;\r\n\r\n    public canvasHeight: number;\r\n\r\n    constructor(options?: IGameOptions) {\r\n        this._options = options;\r\n        this._logger = Logger.getInstance();\r\n        this._initialize();\r\n    }\r\n\r\n    private _initialize() {\r\n        this.canvasElementId = this._options.canvasElementId;\r\n\r\n        if (this._options.canvasElementId) {\r\n            this._logger.debug('Using Canvas element specified: ' + this._options.canvasElementId);\r\n            this.canvas = <HTMLCanvasElement>document.getElementById(this._options.canvasElementId);\r\n        } else {\r\n            this._logger.debug('Using generated canvas element');\r\n            this.canvas = <HTMLCanvasElement>document.createElement('canvas');\r\n        }\r\n\r\n        if (this._options.width && this._options.height) {\r\n            this._logger.debug('Engine viewport is size ' + this._options.width + ' x ' + this._options.height);\r\n            this.canvasWidth = this._options.width;\r\n            this.canvasHeight = this._options.height;\r\n\r\n            this.canvas.width = this.canvasWidth;\r\n            this.canvas.height = this.canvasHeight;\r\n        }\r\n\r\n        this.ctx = <CanvasRenderingContext2D>this.canvas.getContext('2d');\r\n        if (!this.canvasElementId) {\r\n            document.body.appendChild(this.canvas);\r\n        }\r\n    }\r\n\r\n\r\n}","import { Game } from './engine/game'\r\n\r\nconsole.log('Welcome to Bakudan Boy!');\r\n\r\nvar myGame = new Game({\r\n    width: 800,\r\n    height: 600,\r\n    canvasElementId: 'canvas-game',\r\n    spriteSheetUrl: './assets/image/bbo_textures.png',\r\n    timeScale: 1,\r\n});\r\nmyGame.start();\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}